ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	PWM_initVar
  19              		.bss
  20              		.type	PWM_initVar, %object
  21              		.size	PWM_initVar, 1
  22              	PWM_initVar:
  23 0000 00       		.space	1
  24              		.section	.text.PWM_Start,"ax",%progbits
  25              		.align	2
  26              		.global	PWM_Start
  27              		.thumb
  28              		.thumb_func
  29              		.type	PWM_Start, %function
  30              	PWM_Start:
  31              	.LFB0:
  32              		.file 1 ".\\Generated_Source\\PSoC5\\PWM.c"
   1:.\Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/PWM.c **** * File Name: PWM.c
   3:.\Generated_Source\PSoC5/PWM.c **** * Version 3.30
   4:.\Generated_Source\PSoC5/PWM.c **** *
   5:.\Generated_Source\PSoC5/PWM.c **** * Description:
   6:.\Generated_Source\PSoC5/PWM.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC5/PWM.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC5/PWM.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC5/PWM.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC5/PWM.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC5/PWM.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC5/PWM.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC5/PWM.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC5/PWM.c **** *
  15:.\Generated_Source\PSoC5/PWM.c **** * Note:
  16:.\Generated_Source\PSoC5/PWM.c **** *
  17:.\Generated_Source\PSoC5/PWM.c **** *******************************************************************************
  18:.\Generated_Source\PSoC5/PWM.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC5/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC5/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC5/PWM.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC5/PWM.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC5/PWM.c **** 
  24:.\Generated_Source\PSoC5/PWM.c **** #include "PWM.h"
  25:.\Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 2


  26:.\Generated_Source\PSoC5/PWM.c **** /* Error message for removed <resource> through optimization */
  27:.\Generated_Source\PSoC5/PWM.c **** #ifdef PWM_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC5/PWM.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC5/PWM.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC5/PWM.c **** #endif /* PWM_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC5/PWM.c **** 
  32:.\Generated_Source\PSoC5/PWM.c **** uint8 PWM_initVar = 0u;
  33:.\Generated_Source\PSoC5/PWM.c **** 
  34:.\Generated_Source\PSoC5/PWM.c **** 
  35:.\Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Start
  37:.\Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  38:.\Generated_Source\PSoC5/PWM.c **** *
  39:.\Generated_Source\PSoC5/PWM.c **** * Summary:
  40:.\Generated_Source\PSoC5/PWM.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC5/PWM.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC5/PWM.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC5/PWM.c **** *
  44:.\Generated_Source\PSoC5/PWM.c **** * Parameters:
  45:.\Generated_Source\PSoC5/PWM.c **** *  None
  46:.\Generated_Source\PSoC5/PWM.c **** *
  47:.\Generated_Source\PSoC5/PWM.c **** * Return:
  48:.\Generated_Source\PSoC5/PWM.c **** *  None
  49:.\Generated_Source\PSoC5/PWM.c **** *
  50:.\Generated_Source\PSoC5/PWM.c **** * Global variables:
  51:.\Generated_Source\PSoC5/PWM.c **** *  PWM_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC5/PWM.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC5/PWM.c **** *
  54:.\Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC5/PWM.c **** void PWM_Start(void) 
  56:.\Generated_Source\PSoC5/PWM.c **** {
  33              		.loc 1 56 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 00AF     		add	r7, sp, #0
  42              		.cfi_def_cfa_register 7
  57:.\Generated_Source\PSoC5/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC5/PWM.c ****     if(PWM_initVar == 0u)
  43              		.loc 1 58 0
  44 0004 054B     		ldr	r3, .L3
  45 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  46 0008 002B     		cmp	r3, #0
  47 000a 04D1     		bne	.L2
  59:.\Generated_Source\PSoC5/PWM.c ****     {
  60:.\Generated_Source\PSoC5/PWM.c ****         PWM_Init();
  48              		.loc 1 60 0
  49 000c FFF7FEFF 		bl	PWM_Init
  61:.\Generated_Source\PSoC5/PWM.c ****         PWM_initVar = 1u;
  50              		.loc 1 61 0
  51 0010 024B     		ldr	r3, .L3
  52 0012 0122     		movs	r2, #1
  53 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 3


  54              	.L2:
  62:.\Generated_Source\PSoC5/PWM.c ****     }
  63:.\Generated_Source\PSoC5/PWM.c ****     PWM_Enable();
  55              		.loc 1 63 0
  56 0016 FFF7FEFF 		bl	PWM_Enable
  64:.\Generated_Source\PSoC5/PWM.c **** 
  65:.\Generated_Source\PSoC5/PWM.c **** }
  57              		.loc 1 65 0
  58 001a 80BD     		pop	{r7, pc}
  59              	.L4:
  60              		.align	2
  61              	.L3:
  62 001c 00000000 		.word	PWM_initVar
  63              		.cfi_endproc
  64              	.LFE0:
  65              		.size	PWM_Start, .-PWM_Start
  66              		.section	.text.PWM_Init,"ax",%progbits
  67              		.align	2
  68              		.global	PWM_Init
  69              		.thumb
  70              		.thumb_func
  71              		.type	PWM_Init, %function
  72              	PWM_Init:
  73              	.LFB1:
  66:.\Generated_Source\PSoC5/PWM.c **** 
  67:.\Generated_Source\PSoC5/PWM.c **** 
  68:.\Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Init
  70:.\Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  71:.\Generated_Source\PSoC5/PWM.c **** *
  72:.\Generated_Source\PSoC5/PWM.c **** * Summary:
  73:.\Generated_Source\PSoC5/PWM.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC5/PWM.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC5/PWM.c **** *  PWM_Start().
  76:.\Generated_Source\PSoC5/PWM.c **** *
  77:.\Generated_Source\PSoC5/PWM.c **** * Parameters:
  78:.\Generated_Source\PSoC5/PWM.c **** *  None
  79:.\Generated_Source\PSoC5/PWM.c **** *
  80:.\Generated_Source\PSoC5/PWM.c **** * Return:
  81:.\Generated_Source\PSoC5/PWM.c **** *  None
  82:.\Generated_Source\PSoC5/PWM.c **** *
  83:.\Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC5/PWM.c **** void PWM_Init(void) 
  85:.\Generated_Source\PSoC5/PWM.c **** {
  74              		.loc 1 85 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 82B0     		sub	sp, sp, #8
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
  86:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 4


  87:.\Generated_Source\PSoC5/PWM.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction || PWM_UseControl) */
  89:.\Generated_Source\PSoC5/PWM.c **** 
  90:.\Generated_Source\PSoC5/PWM.c ****     #if(!PWM_UsingFixedFunction)
  91:.\Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
  92:.\Generated_Source\PSoC5/PWM.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC5/PWM.c ****             uint8 PWM_interruptState;
  94:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
  95:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
  96:.\Generated_Source\PSoC5/PWM.c **** 
  97:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
  98:.\Generated_Source\PSoC5/PWM.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CFG0_MODE;
  86              		.loc 1 99 0
  87 0006 284A     		ldr	r2, .L6
  88 0008 274B     		ldr	r3, .L6
  89 000a 1B78     		ldrb	r3, [r3]
  90 000c DBB2     		uxtb	r3, r3
  91 000e 43F00203 		orr	r3, r3, #2
  92 0012 DBB2     		uxtb	r3, r3
  93 0014 1370     		strb	r3, [r2]
 100:.\Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBand2_4)
 101:.\Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= PWM_CFG0_DB;
 102:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBand2_4) */
 103:.\Generated_Source\PSoC5/PWM.c **** 
 104:.\Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL3 & ((uint8 )(~PWM_CTRL_CMPMODE1_MASK));
  94              		.loc 1 104 0
  95 0016 254B     		ldr	r3, .L6+4
  96 0018 1B78     		ldrb	r3, [r3]
  97 001a DBB2     		uxtb	r3, r3
  98 001c 23F07003 		bic	r3, r3, #112
  99 0020 FB71     		strb	r3, [r7, #7]
 105:.\Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL3 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
 100              		.loc 1 105 0
 101 0022 224A     		ldr	r2, .L6+4
 102 0024 FB79     		ldrb	r3, [r7, #7]
 103 0026 43F01003 		orr	r3, r3, #16
 104 002a DBB2     		uxtb	r3, r3
 105 002c 1370     		strb	r3, [r2]
 106:.\Generated_Source\PSoC5/PWM.c **** 
 107:.\Generated_Source\PSoC5/PWM.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_RT1_MASK));
 106              		.loc 1 108 0
 107 002e 204A     		ldr	r2, .L6+8
 108 0030 1F4B     		ldr	r3, .L6+8
 109 0032 1B78     		ldrb	r3, [r3]
 110 0034 DBB2     		uxtb	r3, r3
 111 0036 23F03003 		bic	r3, r3, #48
 112 003a DBB2     		uxtb	r3, r3
 113 003c 1370     		strb	r3, [r2]
 109:.\Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNC;
 114              		.loc 1 109 0
 115 003e 1C4A     		ldr	r2, .L6+8
 116 0040 1B4B     		ldr	r3, .L6+8
 117 0042 1B78     		ldrb	r3, [r3]
 118 0044 DBB2     		uxtb	r3, r3
 119 0046 43F03003 		orr	r3, r3, #48
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 5


 120 004a DBB2     		uxtb	r3, r3
 121 004c 1370     		strb	r3, [r2]
 110:.\Generated_Source\PSoC5/PWM.c **** 
 111:.\Generated_Source\PSoC5/PWM.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_SYNCDSI_MASK));
 122              		.loc 1 112 0
 123 004e 184A     		ldr	r2, .L6+8
 124 0050 174B     		ldr	r3, .L6+8
 125 0052 1B78     		ldrb	r3, [r3]
 126 0054 DBB2     		uxtb	r3, r3
 127 0056 23F00F03 		bic	r3, r3, #15
 128 005a DBB2     		uxtb	r3, r3
 129 005c 1370     		strb	r3, [r2]
 113:.\Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNCDSI_EN;
 130              		.loc 1 113 0
 131 005e 144A     		ldr	r2, .L6+8
 132 0060 134B     		ldr	r3, .L6+8
 133 0062 1B78     		ldrb	r3, [r3]
 134 0064 DBB2     		uxtb	r3, r3
 135 0066 43F00F03 		orr	r3, r3, #15
 136 006a DBB2     		uxtb	r3, r3
 137 006c 1370     		strb	r3, [r2]
 114:.\Generated_Source\PSoC5/PWM.c **** 
 115:.\Generated_Source\PSoC5/PWM.c ****     #elif (PWM_UseControl)
 116:.\Generated_Source\PSoC5/PWM.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL & ((uint8)(~PWM_CTRL_CMPMODE2_MASK)) &
 118:.\Generated_Source\PSoC5/PWM.c ****                 ((uint8)(~PWM_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL = ctrl | PWM_DEFAULT_COMPARE2_MODE |
 120:.\Generated_Source\PSoC5/PWM.c ****                                    PWM_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 122:.\Generated_Source\PSoC5/PWM.c **** 
 123:.\Generated_Source\PSoC5/PWM.c ****     #if (!PWM_UsingFixedFunction)
 124:.\Generated_Source\PSoC5/PWM.c ****         #if (PWM_Resolution == 8)
 125:.\Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 127:.\Generated_Source\PSoC5/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 128:.\Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_Resolution == 8) */
 132:.\Generated_Source\PSoC5/PWM.c **** 
 133:.\Generated_Source\PSoC5/PWM.c ****         PWM_WriteCounter(PWM_INIT_PERIOD_VALUE);
 134:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 135:.\Generated_Source\PSoC5/PWM.c **** 
 136:.\Generated_Source\PSoC5/PWM.c ****     PWM_WritePeriod(PWM_INIT_PERIOD_VALUE);
 138              		.loc 1 136 0
 139 006e FF20     		movs	r0, #255
 140 0070 FFF7FEFF 		bl	PWM_WritePeriod
 137:.\Generated_Source\PSoC5/PWM.c **** 
 138:.\Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseOneCompareMode)
 139:.\Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare(PWM_INIT_COMPARE_VALUE1);
 141              		.loc 1 139 0
 142 0074 7F20     		movs	r0, #127
 143 0076 FFF7FEFF 		bl	PWM_WriteCompare
 140:.\Generated_Source\PSoC5/PWM.c ****         #else
 141:.\Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare1(PWM_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 6


 143:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseOneCompareMode) */
 144:.\Generated_Source\PSoC5/PWM.c **** 
 145:.\Generated_Source\PSoC5/PWM.c ****         #if (PWM_KillModeMinTime)
 146:.\Generated_Source\PSoC5/PWM.c ****             PWM_WriteKillTime(PWM_MinimumKillTime);
 147:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_KillModeMinTime) */
 148:.\Generated_Source\PSoC5/PWM.c **** 
 149:.\Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBandUsed)
 150:.\Generated_Source\PSoC5/PWM.c ****             PWM_WriteDeadTime(PWM_INIT_DEAD_TIME);
 151:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBandUsed) */
 152:.\Generated_Source\PSoC5/PWM.c **** 
 153:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus || PWM_UsingFixedFunction)
 154:.\Generated_Source\PSoC5/PWM.c ****         PWM_SetInterruptMode(PWM_INIT_INTERRUPTS_MODE);
 144              		.loc 1 154 0
 145 007a 0020     		movs	r0, #0
 146 007c FFF7FEFF 		bl	PWM_SetInterruptMode
 155:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 156:.\Generated_Source\PSoC5/PWM.c **** 
 157:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 158:.\Generated_Source\PSoC5/PWM.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 147              		.loc 1 159 0
 148 0080 0C4A     		ldr	r2, .L6+12
 149 0082 0C4B     		ldr	r3, .L6+12
 150 0084 1B78     		ldrb	r3, [r3]
 151 0086 DBB2     		uxtb	r3, r3
 152 0088 43F00103 		orr	r3, r3, #1
 153 008c DBB2     		uxtb	r3, r3
 154 008e 1370     		strb	r3, [r2]
 160:.\Generated_Source\PSoC5/PWM.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL2 |= PWM_CTRL2_IRQ_SEL;
 155              		.loc 1 161 0
 156 0090 094A     		ldr	r2, .L6+16
 157 0092 094B     		ldr	r3, .L6+16
 158 0094 1B78     		ldrb	r3, [r3]
 159 0096 DBB2     		uxtb	r3, r3
 160 0098 43F00103 		orr	r3, r3, #1
 161 009c DBB2     		uxtb	r3, r3
 162 009e 1370     		strb	r3, [r2]
 162:.\Generated_Source\PSoC5/PWM.c ****     #else
 163:.\Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
 164:.\Generated_Source\PSoC5/PWM.c **** 
 165:.\Generated_Source\PSoC5/PWM.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC5/PWM.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC5/PWM.c ****             PWM_interruptState = CyEnterCriticalSection();
 168:.\Generated_Source\PSoC5/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC5/PWM.c ****             PWM_STATUS_AUX_CTRL |= PWM_STATUS_ACTL_INT_EN_MASK;
 170:.\Generated_Source\PSoC5/PWM.c **** 
 171:.\Generated_Source\PSoC5/PWM.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC5/PWM.c ****             CyExitCriticalSection(PWM_interruptState);
 173:.\Generated_Source\PSoC5/PWM.c **** 
 174:.\Generated_Source\PSoC5/PWM.c ****             /* Clear the FIFO to enable the PWM_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC5/PWM.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC5/PWM.c ****             PWM_ClearFIFO();
 177:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
 178:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 179:.\Generated_Source\PSoC5/PWM.c **** }
 163              		.loc 1 179 0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 7


 164 00a0 0837     		adds	r7, r7, #8
 165              		.cfi_def_cfa_offset 8
 166 00a2 BD46     		mov	sp, r7
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 00a4 80BD     		pop	{r7, pc}
 170              	.L7:
 171 00a6 00BF     		.align	2
 172              	.L6:
 173 00a8 004F0040 		.word	1073762048
 174 00ac 024F0040 		.word	1073762050
 175 00b0 0B4F0040 		.word	1073762059
 176 00b4 A3430040 		.word	1073759139
 177 00b8 014F0040 		.word	1073762049
 178              		.cfi_endproc
 179              	.LFE1:
 180              		.size	PWM_Init, .-PWM_Init
 181              		.section	.text.PWM_Enable,"ax",%progbits
 182              		.align	2
 183              		.global	PWM_Enable
 184              		.thumb
 185              		.thumb_func
 186              		.type	PWM_Enable, %function
 187              	PWM_Enable:
 188              	.LFB2:
 180:.\Generated_Source\PSoC5/PWM.c **** 
 181:.\Generated_Source\PSoC5/PWM.c **** 
 182:.\Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Enable
 184:.\Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 185:.\Generated_Source\PSoC5/PWM.c **** *
 186:.\Generated_Source\PSoC5/PWM.c **** * Summary:
 187:.\Generated_Source\PSoC5/PWM.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC5/PWM.c **** *
 189:.\Generated_Source\PSoC5/PWM.c **** * Parameters:
 190:.\Generated_Source\PSoC5/PWM.c **** *  None
 191:.\Generated_Source\PSoC5/PWM.c **** *
 192:.\Generated_Source\PSoC5/PWM.c **** * Return:
 193:.\Generated_Source\PSoC5/PWM.c **** *  None
 194:.\Generated_Source\PSoC5/PWM.c **** *
 195:.\Generated_Source\PSoC5/PWM.c **** * Side Effects:
 196:.\Generated_Source\PSoC5/PWM.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC5/PWM.c **** *
 198:.\Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC5/PWM.c **** void PWM_Enable(void) 
 200:.\Generated_Source\PSoC5/PWM.c **** {
 189              		.loc 1 200 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194 0000 80B4     		push	{r7}
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
 201:.\Generated_Source\PSoC5/PWM.c ****     /* Globally Enable the Fixed Function Block chosen */
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 8


 202:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 203:.\Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 199              		.loc 1 203 0
 200 0004 0D4A     		ldr	r2, .L9
 201 0006 0D4B     		ldr	r3, .L9
 202 0008 1B78     		ldrb	r3, [r3]
 203 000a DBB2     		uxtb	r3, r3
 204 000c 43F00103 		orr	r3, r3, #1
 205 0010 DBB2     		uxtb	r3, r3
 206 0012 1370     		strb	r3, [r2]
 204:.\Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE |= PWM_BLOCK_STBY_EN_MASK;
 207              		.loc 1 204 0
 208 0014 0A4A     		ldr	r2, .L9+4
 209 0016 0A4B     		ldr	r3, .L9+4
 210 0018 1B78     		ldrb	r3, [r3]
 211 001a DBB2     		uxtb	r3, r3
 212 001c 43F00103 		orr	r3, r3, #1
 213 0020 DBB2     		uxtb	r3, r3
 214 0022 1370     		strb	r3, [r2]
 205:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 206:.\Generated_Source\PSoC5/PWM.c **** 
 207:.\Generated_Source\PSoC5/PWM.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 209:.\Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CTRL_ENABLE;
 215              		.loc 1 209 0
 216 0024 074A     		ldr	r2, .L9+8
 217 0026 074B     		ldr	r3, .L9+8
 218 0028 1B78     		ldrb	r3, [r3]
 219 002a DBB2     		uxtb	r3, r3
 220 002c 43F00103 		orr	r3, r3, #1
 221 0030 DBB2     		uxtb	r3, r3
 222 0032 1370     		strb	r3, [r2]
 210:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 211:.\Generated_Source\PSoC5/PWM.c **** }
 223              		.loc 1 211 0
 224 0034 BD46     		mov	sp, r7
 225              		.cfi_def_cfa_register 13
 226              		@ sp needed
 227 0036 5DF8047B 		ldr	r7, [sp], #4
 228              		.cfi_restore 7
 229              		.cfi_def_cfa_offset 0
 230 003a 7047     		bx	lr
 231              	.L10:
 232              		.align	2
 233              	.L9:
 234 003c A3430040 		.word	1073759139
 235 0040 B3430040 		.word	1073759155
 236 0044 004F0040 		.word	1073762048
 237              		.cfi_endproc
 238              	.LFE2:
 239              		.size	PWM_Enable, .-PWM_Enable
 240              		.section	.text.PWM_Stop,"ax",%progbits
 241              		.align	2
 242              		.global	PWM_Stop
 243              		.thumb
 244              		.thumb_func
 245              		.type	PWM_Stop, %function
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 9


 246              	PWM_Stop:
 247              	.LFB3:
 212:.\Generated_Source\PSoC5/PWM.c **** 
 213:.\Generated_Source\PSoC5/PWM.c **** 
 214:.\Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Stop
 216:.\Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 217:.\Generated_Source\PSoC5/PWM.c **** *
 218:.\Generated_Source\PSoC5/PWM.c **** * Summary:
 219:.\Generated_Source\PSoC5/PWM.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC5/PWM.c **** *  interrupts.
 221:.\Generated_Source\PSoC5/PWM.c **** *
 222:.\Generated_Source\PSoC5/PWM.c **** * Parameters:
 223:.\Generated_Source\PSoC5/PWM.c **** *  None
 224:.\Generated_Source\PSoC5/PWM.c **** *
 225:.\Generated_Source\PSoC5/PWM.c **** * Return:
 226:.\Generated_Source\PSoC5/PWM.c **** *  None
 227:.\Generated_Source\PSoC5/PWM.c **** *
 228:.\Generated_Source\PSoC5/PWM.c **** * Side Effects:
 229:.\Generated_Source\PSoC5/PWM.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC5/PWM.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC5/PWM.c **** *
 232:.\Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC5/PWM.c **** void PWM_Stop(void) 
 234:.\Generated_Source\PSoC5/PWM.c **** {
 248              		.loc 1 234 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253 0000 80B4     		push	{r7}
 254              		.cfi_def_cfa_offset 4
 255              		.cfi_offset 7, -4
 256 0002 00AF     		add	r7, sp, #0
 257              		.cfi_def_cfa_register 7
 235:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 236:.\Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL &= ((uint8)(~PWM_CTRL_ENABLE));
 258              		.loc 1 236 0
 259 0004 0D4A     		ldr	r2, .L12
 260 0006 0D4B     		ldr	r3, .L12
 261 0008 1B78     		ldrb	r3, [r3]
 262 000a DBB2     		uxtb	r3, r3
 263 000c 23F00103 		bic	r3, r3, #1
 264 0010 DBB2     		uxtb	r3, r3
 265 0012 1370     		strb	r3, [r2]
 237:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 238:.\Generated_Source\PSoC5/PWM.c **** 
 239:.\Generated_Source\PSoC5/PWM.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 241:.\Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE &= ((uint8)(~PWM_BLOCK_EN_MASK));
 266              		.loc 1 241 0
 267 0014 0A4A     		ldr	r2, .L12+4
 268 0016 0A4B     		ldr	r3, .L12+4
 269 0018 1B78     		ldrb	r3, [r3]
 270 001a DBB2     		uxtb	r3, r3
 271 001c 23F00103 		bic	r3, r3, #1
 272 0020 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 10


 273 0022 1370     		strb	r3, [r2]
 242:.\Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_BLOCK_STBY_EN_MASK));
 274              		.loc 1 242 0
 275 0024 074A     		ldr	r2, .L12+8
 276 0026 074B     		ldr	r3, .L12+8
 277 0028 1B78     		ldrb	r3, [r3]
 278 002a DBB2     		uxtb	r3, r3
 279 002c 23F00103 		bic	r3, r3, #1
 280 0030 DBB2     		uxtb	r3, r3
 281 0032 1370     		strb	r3, [r2]
 243:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 244:.\Generated_Source\PSoC5/PWM.c **** }
 282              		.loc 1 244 0
 283 0034 BD46     		mov	sp, r7
 284              		.cfi_def_cfa_register 13
 285              		@ sp needed
 286 0036 5DF8047B 		ldr	r7, [sp], #4
 287              		.cfi_restore 7
 288              		.cfi_def_cfa_offset 0
 289 003a 7047     		bx	lr
 290              	.L13:
 291              		.align	2
 292              	.L12:
 293 003c 004F0040 		.word	1073762048
 294 0040 A3430040 		.word	1073759139
 295 0044 B3430040 		.word	1073759155
 296              		.cfi_endproc
 297              	.LFE3:
 298              		.size	PWM_Stop, .-PWM_Stop
 299              		.section	.text.PWM_WritePeriod,"ax",%progbits
 300              		.align	2
 301              		.global	PWM_WritePeriod
 302              		.thumb
 303              		.thumb_func
 304              		.type	PWM_WritePeriod, %function
 305              	PWM_WritePeriod:
 306              	.LFB4:
 245:.\Generated_Source\PSoC5/PWM.c **** 
 246:.\Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 247:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 248:.\Generated_Source\PSoC5/PWM.c **** 
 249:.\Generated_Source\PSoC5/PWM.c **** 
 250:.\Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode
 252:.\Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC5/PWM.c ****         *
 254:.\Generated_Source\PSoC5/PWM.c ****         * Summary:
 255:.\Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC5/PWM.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC5/PWM.c ****         *
 258:.\Generated_Source\PSoC5/PWM.c ****         * Parameters:
 259:.\Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC5/PWM.c ****         *
 262:.\Generated_Source\PSoC5/PWM.c ****         * Return:
 263:.\Generated_Source\PSoC5/PWM.c ****         *  None
 264:.\Generated_Source\PSoC5/PWM.c ****         *
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 11


 265:.\Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC5/PWM.c ****         {
 268:.\Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 269:.\Generated_Source\PSoC5/PWM.c **** 
 270:.\Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIF
 272:.\Generated_Source\PSoC5/PWM.c ****                 #else
 273:.\Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC5/PWM.c **** 
 276:.\Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:.\Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC5/PWM.c **** 
 279:.\Generated_Source\PSoC5/PWM.c ****             #elif (PWM_UseControl)
 280:.\Generated_Source\PSoC5/PWM.c **** 
 281:.\Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHI
 283:.\Generated_Source\PSoC5/PWM.c ****                                                 PWM_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC5/PWM.c ****                 #else
 285:.\Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC5/PWM.c **** 
 288:.\Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHI
 290:.\Generated_Source\PSoC5/PWM.c ****                                                PWM_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC5/PWM.c ****                 #else
 292:.\Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC5/PWM.c **** 
 295:.\Generated_Source\PSoC5/PWM.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~(PWM_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC5/PWM.c ****                                             PWM_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC5/PWM.c **** 
 300:.\Generated_Source\PSoC5/PWM.c ****             #else
 301:.\Generated_Source\PSoC5/PWM.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 303:.\Generated_Source\PSoC5/PWM.c ****         }
 304:.\Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 305:.\Generated_Source\PSoC5/PWM.c **** 
 306:.\Generated_Source\PSoC5/PWM.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC5/PWM.c **** 
 308:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 309:.\Generated_Source\PSoC5/PWM.c **** 
 310:.\Generated_Source\PSoC5/PWM.c **** 
 311:.\Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode1
 313:.\Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC5/PWM.c ****         *
 315:.\Generated_Source\PSoC5/PWM.c ****         * Summary:
 316:.\Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC5/PWM.c ****         *
 318:.\Generated_Source\PSoC5/PWM.c ****         * Parameters:
 319:.\Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC5/PWM.c ****         *
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 12


 322:.\Generated_Source\PSoC5/PWM.c ****         * Return:
 323:.\Generated_Source\PSoC5/PWM.c ****         *  None
 324:.\Generated_Source\PSoC5/PWM.c ****         *
 325:.\Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC5/PWM.c ****         {
 328:.\Generated_Source\PSoC5/PWM.c ****             #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIFT)) 
 330:.\Generated_Source\PSoC5/PWM.c ****                                            PWM_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC5/PWM.c ****             #else
 332:.\Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC5/PWM.c ****             #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC5/PWM.c **** 
 335:.\Generated_Source\PSoC5/PWM.c ****             #if (PWM_UseControl)
 336:.\Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:.\Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UseControl) */
 339:.\Generated_Source\PSoC5/PWM.c ****         }
 340:.\Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 341:.\Generated_Source\PSoC5/PWM.c **** 
 342:.\Generated_Source\PSoC5/PWM.c **** #if (PWM_CompareMode2SW)
 343:.\Generated_Source\PSoC5/PWM.c **** 
 344:.\Generated_Source\PSoC5/PWM.c **** 
 345:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetCompareMode2
 347:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC5/PWM.c ****     *
 349:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 350:.\Generated_Source\PSoC5/PWM.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC5/PWM.c ****     *
 352:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 353:.\Generated_Source\PSoC5/PWM.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC5/PWM.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC5/PWM.c ****     *
 356:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 357:.\Generated_Source\PSoC5/PWM.c ****     *  None
 358:.\Generated_Source\PSoC5/PWM.c ****     *
 359:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC5/PWM.c ****     void PWM_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC5/PWM.c ****     {
 362:.\Generated_Source\PSoC5/PWM.c **** 
 363:.\Generated_Source\PSoC5/PWM.c ****         #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHIFT)) &
 365:.\Generated_Source\PSoC5/PWM.c ****                                                  PWM_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC5/PWM.c ****         #else
 367:.\Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC5/PWM.c **** 
 370:.\Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseControl)
 371:.\Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseControl) */
 374:.\Generated_Source\PSoC5/PWM.c ****     }
 375:.\Generated_Source\PSoC5/PWM.c ****     #endif /*PWM_CompareMode2SW */
 376:.\Generated_Source\PSoC5/PWM.c **** 
 377:.\Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 13


 379:.\Generated_Source\PSoC5/PWM.c **** 
 380:.\Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 381:.\Generated_Source\PSoC5/PWM.c **** 
 382:.\Generated_Source\PSoC5/PWM.c **** 
 383:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCounter
 385:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC5/PWM.c ****     *
 387:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 388:.\Generated_Source\PSoC5/PWM.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC5/PWM.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC5/PWM.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC5/PWM.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC5/PWM.c ****     *
 393:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 394:.\Generated_Source\PSoC5/PWM.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC5/PWM.c ****     *
 396:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 397:.\Generated_Source\PSoC5/PWM.c ****     *  None
 398:.\Generated_Source\PSoC5/PWM.c ****     *
 399:.\Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 400:.\Generated_Source\PSoC5/PWM.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC5/PWM.c ****     *
 402:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCounter(uint8 counter) \
 404:.\Generated_Source\PSoC5/PWM.c ****                                        
 405:.\Generated_Source\PSoC5/PWM.c ****     {
 406:.\Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_COUNTER_LSB_PTR, counter);
 407:.\Generated_Source\PSoC5/PWM.c ****     }
 408:.\Generated_Source\PSoC5/PWM.c **** 
 409:.\Generated_Source\PSoC5/PWM.c **** 
 410:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 411:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCounter
 412:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC5/PWM.c ****     *
 414:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 415:.\Generated_Source\PSoC5/PWM.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC5/PWM.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC5/PWM.c ****     *
 418:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 419:.\Generated_Source\PSoC5/PWM.c ****     *  None
 420:.\Generated_Source\PSoC5/PWM.c ****     *
 421:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 422:.\Generated_Source\PSoC5/PWM.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC5/PWM.c ****     *
 424:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCounter(void) 
 426:.\Generated_Source\PSoC5/PWM.c ****     {
 427:.\Generated_Source\PSoC5/PWM.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC5/PWM.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC5/PWM.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC5/PWM.c ****           (void)CY_GET_REG8(PWM_COUNTERCAP_LSB_PTR_8BIT);
 431:.\Generated_Source\PSoC5/PWM.c **** 
 432:.\Generated_Source\PSoC5/PWM.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 434:.\Generated_Source\PSoC5/PWM.c ****     }
 435:.\Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 14


 436:.\Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus)
 437:.\Generated_Source\PSoC5/PWM.c **** 
 438:.\Generated_Source\PSoC5/PWM.c **** 
 439:.\Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_ClearFIFO
 441:.\Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC5/PWM.c ****         *
 443:.\Generated_Source\PSoC5/PWM.c ****         * Summary:
 444:.\Generated_Source\PSoC5/PWM.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC5/PWM.c ****         *
 446:.\Generated_Source\PSoC5/PWM.c ****         * Parameters:
 447:.\Generated_Source\PSoC5/PWM.c ****         *  None
 448:.\Generated_Source\PSoC5/PWM.c ****         *
 449:.\Generated_Source\PSoC5/PWM.c ****         * Return:
 450:.\Generated_Source\PSoC5/PWM.c ****         *  None
 451:.\Generated_Source\PSoC5/PWM.c ****         *
 452:.\Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC5/PWM.c ****         void PWM_ClearFIFO(void) 
 454:.\Generated_Source\PSoC5/PWM.c ****         {
 455:.\Generated_Source\PSoC5/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 456:.\Generated_Source\PSoC5/PWM.c ****             {
 457:.\Generated_Source\PSoC5/PWM.c ****                 (void)PWM_ReadCapture();
 458:.\Generated_Source\PSoC5/PWM.c ****             }
 459:.\Generated_Source\PSoC5/PWM.c ****         }
 460:.\Generated_Source\PSoC5/PWM.c **** 
 461:.\Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_UseStatus */
 462:.\Generated_Source\PSoC5/PWM.c **** 
 463:.\Generated_Source\PSoC5/PWM.c **** #endif /* !PWM_UsingFixedFunction */
 464:.\Generated_Source\PSoC5/PWM.c **** 
 465:.\Generated_Source\PSoC5/PWM.c **** 
 466:.\Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_WritePeriod
 468:.\Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 469:.\Generated_Source\PSoC5/PWM.c **** *
 470:.\Generated_Source\PSoC5/PWM.c **** * Summary:
 471:.\Generated_Source\PSoC5/PWM.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC5/PWM.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC5/PWM.c **** *
 474:.\Generated_Source\PSoC5/PWM.c **** * Parameters:
 475:.\Generated_Source\PSoC5/PWM.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC5/PWM.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC5/PWM.c **** *
 478:.\Generated_Source\PSoC5/PWM.c **** * Return:
 479:.\Generated_Source\PSoC5/PWM.c **** *  None
 480:.\Generated_Source\PSoC5/PWM.c **** *
 481:.\Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC5/PWM.c **** void PWM_WritePeriod(uint8 period) 
 483:.\Generated_Source\PSoC5/PWM.c **** {
 307              		.loc 1 483 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 8
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312 0000 80B4     		push	{r7}
 313              		.cfi_def_cfa_offset 4
 314              		.cfi_offset 7, -4
 315 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 15


 316              		.cfi_def_cfa_offset 16
 317 0004 00AF     		add	r7, sp, #0
 318              		.cfi_def_cfa_register 7
 319 0006 0346     		mov	r3, r0
 320 0008 FB71     		strb	r3, [r7, #7]
 484:.\Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 485:.\Generated_Source\PSoC5/PWM.c ****         CY_SET_REG16(PWM_PERIOD_LSB_PTR, (uint16)period);
 321              		.loc 1 485 0
 322 000a 044B     		ldr	r3, .L15
 323 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 324 000e 92B2     		uxth	r2, r2
 325 0010 1A80     		strh	r2, [r3]	@ movhi
 486:.\Generated_Source\PSoC5/PWM.c ****     #else
 487:.\Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_PERIOD_LSB_PTR, period);
 488:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 489:.\Generated_Source\PSoC5/PWM.c **** }
 326              		.loc 1 489 0
 327 0012 0C37     		adds	r7, r7, #12
 328              		.cfi_def_cfa_offset 4
 329 0014 BD46     		mov	sp, r7
 330              		.cfi_def_cfa_register 13
 331              		@ sp needed
 332 0016 5DF8047B 		ldr	r7, [sp], #4
 333              		.cfi_restore 7
 334              		.cfi_def_cfa_offset 0
 335 001a 7047     		bx	lr
 336              	.L16:
 337              		.align	2
 338              	.L15:
 339 001c 044F0040 		.word	1073762052
 340              		.cfi_endproc
 341              	.LFE4:
 342              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 343              		.section	.text.PWM_WriteCompare,"ax",%progbits
 344              		.align	2
 345              		.global	PWM_WriteCompare
 346              		.thumb
 347              		.thumb_func
 348              		.type	PWM_WriteCompare, %function
 349              	PWM_WriteCompare:
 350              	.LFB5:
 490:.\Generated_Source\PSoC5/PWM.c **** 
 491:.\Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 492:.\Generated_Source\PSoC5/PWM.c **** 
 493:.\Generated_Source\PSoC5/PWM.c **** 
 494:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare
 496:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC5/PWM.c ****     *
 498:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 499:.\Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC5/PWM.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC5/PWM.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC5/PWM.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC5/PWM.c ****     *
 505:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 16


 506:.\Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC5/PWM.c ****     *
 508:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 509:.\Generated_Source\PSoC5/PWM.c ****     *  None
 510:.\Generated_Source\PSoC5/PWM.c ****     *
 511:.\Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 512:.\Generated_Source\PSoC5/PWM.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC5/PWM.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC5/PWM.c ****     *
 515:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare(uint8 compare) \
 517:.\Generated_Source\PSoC5/PWM.c ****                                        
 518:.\Generated_Source\PSoC5/PWM.c ****     {
 351              		.loc 1 518 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 8
 354              		@ frame_needed = 1, uses_anonymous_args = 0
 355              		@ link register save eliminated.
 356 0000 80B4     		push	{r7}
 357              		.cfi_def_cfa_offset 4
 358              		.cfi_offset 7, -4
 359 0002 83B0     		sub	sp, sp, #12
 360              		.cfi_def_cfa_offset 16
 361 0004 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
 363 0006 0346     		mov	r3, r0
 364 0008 FB71     		strb	r3, [r7, #7]
 519:.\Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 520:.\Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 365              		.loc 1 520 0
 366 000a 044B     		ldr	r3, .L18
 367 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 368 000e 92B2     		uxth	r2, r2
 369 0010 1A80     		strh	r2, [r3]	@ movhi
 521:.\Generated_Source\PSoC5/PWM.c ****         #else
 522:.\Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 523:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 524:.\Generated_Source\PSoC5/PWM.c **** 
 525:.\Generated_Source\PSoC5/PWM.c ****         #if (PWM_PWMMode == PWM__B_PWM__DITHER)
 526:.\Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 527:.\Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG16(PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC5/PWM.c ****             #else
 529:.\Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG8(PWM_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 531:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_PWMMode == PWM__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC5/PWM.c ****     }
 370              		.loc 1 532 0
 371 0012 0C37     		adds	r7, r7, #12
 372              		.cfi_def_cfa_offset 4
 373 0014 BD46     		mov	sp, r7
 374              		.cfi_def_cfa_register 13
 375              		@ sp needed
 376 0016 5DF8047B 		ldr	r7, [sp], #4
 377              		.cfi_restore 7
 378              		.cfi_def_cfa_offset 0
 379 001a 7047     		bx	lr
 380              	.L19:
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 17


 381              		.align	2
 382              	.L18:
 383 001c 064F0040 		.word	1073762054
 384              		.cfi_endproc
 385              	.LFE5:
 386              		.size	PWM_WriteCompare, .-PWM_WriteCompare
 387              		.section	.text.PWM_SetInterruptMode,"ax",%progbits
 388              		.align	2
 389              		.global	PWM_SetInterruptMode
 390              		.thumb
 391              		.thumb_func
 392              		.type	PWM_SetInterruptMode, %function
 393              	PWM_SetInterruptMode:
 394              	.LFB6:
 533:.\Generated_Source\PSoC5/PWM.c **** 
 534:.\Generated_Source\PSoC5/PWM.c **** 
 535:.\Generated_Source\PSoC5/PWM.c **** #else
 536:.\Generated_Source\PSoC5/PWM.c **** 
 537:.\Generated_Source\PSoC5/PWM.c **** 
 538:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare1
 540:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC5/PWM.c ****     *
 542:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 543:.\Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC5/PWM.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC5/PWM.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC5/PWM.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC5/PWM.c ****     *
 548:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 549:.\Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC5/PWM.c ****     *
 551:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 552:.\Generated_Source\PSoC5/PWM.c ****     *  None
 553:.\Generated_Source\PSoC5/PWM.c ****     *
 554:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare1(uint8 compare) \
 556:.\Generated_Source\PSoC5/PWM.c ****                                         
 557:.\Generated_Source\PSoC5/PWM.c ****     {
 558:.\Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 559:.\Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC5/PWM.c ****         #else
 561:.\Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 562:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 563:.\Generated_Source\PSoC5/PWM.c ****     }
 564:.\Generated_Source\PSoC5/PWM.c **** 
 565:.\Generated_Source\PSoC5/PWM.c **** 
 566:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare2
 568:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC5/PWM.c ****     *
 570:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 571:.\Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC5/PWM.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC5/PWM.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC5/PWM.c ****     *  mode.
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 18


 576:.\Generated_Source\PSoC5/PWM.c ****     *
 577:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 578:.\Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC5/PWM.c ****     *
 580:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 581:.\Generated_Source\PSoC5/PWM.c ****     *  None
 582:.\Generated_Source\PSoC5/PWM.c ****     *
 583:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare2(uint8 compare) \
 585:.\Generated_Source\PSoC5/PWM.c ****                                         
 586:.\Generated_Source\PSoC5/PWM.c ****     {
 587:.\Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 588:.\Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC5/PWM.c ****         #else
 590:.\Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE2_LSB_PTR, compare);
 591:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 592:.\Generated_Source\PSoC5/PWM.c ****     }
 593:.\Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC5/PWM.c **** 
 595:.\Generated_Source\PSoC5/PWM.c **** #if (PWM_DeadBandUsed)
 596:.\Generated_Source\PSoC5/PWM.c **** 
 597:.\Generated_Source\PSoC5/PWM.c **** 
 598:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteDeadTime
 600:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC5/PWM.c ****     *
 602:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 603:.\Generated_Source\PSoC5/PWM.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC5/PWM.c ****     *
 605:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 606:.\Generated_Source\PSoC5/PWM.c ****     *  deadtime:  Number of counts for dead time
 607:.\Generated_Source\PSoC5/PWM.c ****     *
 608:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 609:.\Generated_Source\PSoC5/PWM.c ****     *  None
 610:.\Generated_Source\PSoC5/PWM.c ****     *
 611:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC5/PWM.c ****     void PWM_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC5/PWM.c ****     {
 614:.\Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 616:.\Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_DEADBAND_COUNT_PTR, deadtime);
 617:.\Generated_Source\PSoC5/PWM.c ****         #else
 618:.\Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC5/PWM.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC5/PWM.c ****             PWM_DEADBAND_COUNT &= ((uint8)(~PWM_DEADBAND_COUNT_MASK));
 621:.\Generated_Source\PSoC5/PWM.c **** 
 622:.\Generated_Source\PSoC5/PWM.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_DEADBAND_COUNT_SHIFT)) &
 625:.\Generated_Source\PSoC5/PWM.c ****                                                     PWM_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC5/PWM.c ****             #else
 627:.\Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= deadtime & PWM_DEADBAND_COUNT_MASK;
 628:.\Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC5/PWM.c **** 
 630:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 631:.\Generated_Source\PSoC5/PWM.c ****     }
 632:.\Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 19


 633:.\Generated_Source\PSoC5/PWM.c **** 
 634:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadDeadTime
 636:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC5/PWM.c ****     *
 638:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 639:.\Generated_Source\PSoC5/PWM.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC5/PWM.c ****     *
 641:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 642:.\Generated_Source\PSoC5/PWM.c ****     *  None
 643:.\Generated_Source\PSoC5/PWM.c ****     *
 644:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 645:.\Generated_Source\PSoC5/PWM.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC5/PWM.c ****     *
 647:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC5/PWM.c ****     {
 650:.\Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 652:.\Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG8(PWM_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC5/PWM.c ****         #else
 654:.\Generated_Source\PSoC5/PWM.c **** 
 655:.\Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC5/PWM.c ****                 return ((uint8)(((uint8)(PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK)) >>
 658:.\Generated_Source\PSoC5/PWM.c ****                                                                            PWM_DEADBAND_COUNT_SHIFT
 659:.\Generated_Source\PSoC5/PWM.c ****             #else
 660:.\Generated_Source\PSoC5/PWM.c ****                 return (PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK);
 661:.\Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 663:.\Generated_Source\PSoC5/PWM.c ****     }
 664:.\Generated_Source\PSoC5/PWM.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC5/PWM.c **** 
 666:.\Generated_Source\PSoC5/PWM.c **** #if (PWM_UseStatus || PWM_UsingFixedFunction)
 667:.\Generated_Source\PSoC5/PWM.c **** 
 668:.\Generated_Source\PSoC5/PWM.c **** 
 669:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetInterruptMode
 671:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC5/PWM.c ****     *
 673:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 674:.\Generated_Source\PSoC5/PWM.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC5/PWM.c ****     *  source status register.
 676:.\Generated_Source\PSoC5/PWM.c ****     *
 677:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 678:.\Generated_Source\PSoC5/PWM.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC5/PWM.c ****     *
 680:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 681:.\Generated_Source\PSoC5/PWM.c ****     *  None
 682:.\Generated_Source\PSoC5/PWM.c ****     *
 683:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC5/PWM.c ****     void PWM_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC5/PWM.c ****     {
 395              		.loc 1 685 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 8
 398              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 20


 399              		@ link register save eliminated.
 400 0000 80B4     		push	{r7}
 401              		.cfi_def_cfa_offset 4
 402              		.cfi_offset 7, -4
 403 0002 83B0     		sub	sp, sp, #12
 404              		.cfi_def_cfa_offset 16
 405 0004 00AF     		add	r7, sp, #0
 406              		.cfi_def_cfa_register 7
 407 0006 0346     		mov	r3, r0
 408 0008 FB71     		strb	r3, [r7, #7]
 686:.\Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_STATUS_MASK_PTR, interruptMode);
 409              		.loc 1 686 0
 410 000a 044A     		ldr	r2, .L21
 411 000c FB79     		ldrb	r3, [r7, #7]
 412 000e 1370     		strb	r3, [r2]
 687:.\Generated_Source\PSoC5/PWM.c ****     }
 413              		.loc 1 687 0
 414 0010 0C37     		adds	r7, r7, #12
 415              		.cfi_def_cfa_offset 4
 416 0012 BD46     		mov	sp, r7
 417              		.cfi_def_cfa_register 13
 418              		@ sp needed
 419 0014 5DF8047B 		ldr	r7, [sp], #4
 420              		.cfi_restore 7
 421              		.cfi_def_cfa_offset 0
 422 0018 7047     		bx	lr
 423              	.L22:
 424 001a 00BF     		.align	2
 425              	.L21:
 426 001c 034F0040 		.word	1073762051
 427              		.cfi_endproc
 428              	.LFE6:
 429              		.size	PWM_SetInterruptMode, .-PWM_SetInterruptMode
 430              		.section	.text.PWM_ReadStatusRegister,"ax",%progbits
 431              		.align	2
 432              		.global	PWM_ReadStatusRegister
 433              		.thumb
 434              		.thumb_func
 435              		.type	PWM_ReadStatusRegister, %function
 436              	PWM_ReadStatusRegister:
 437              	.LFB7:
 688:.\Generated_Source\PSoC5/PWM.c **** 
 689:.\Generated_Source\PSoC5/PWM.c **** 
 690:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadStatusRegister
 692:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC5/PWM.c ****     *
 694:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 695:.\Generated_Source\PSoC5/PWM.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC5/PWM.c ****     *
 697:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 698:.\Generated_Source\PSoC5/PWM.c ****     *  None
 699:.\Generated_Source\PSoC5/PWM.c ****     *
 700:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 701:.\Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC5/PWM.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC5/PWM.c ****     *  [5]   : Kill event output
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 21


 704:.\Generated_Source\PSoC5/PWM.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC5/PWM.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC5/PWM.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC5/PWM.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC5/PWM.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC5/PWM.c ****     *
 710:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC5/PWM.c ****     {
 438              		.loc 1 712 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 1, uses_anonymous_args = 0
 442              		@ link register save eliminated.
 443 0000 80B4     		push	{r7}
 444              		.cfi_def_cfa_offset 4
 445              		.cfi_offset 7, -4
 446 0002 00AF     		add	r7, sp, #0
 447              		.cfi_def_cfa_register 7
 713:.\Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_STATUS_PTR));
 448              		.loc 1 713 0
 449 0004 034B     		ldr	r3, .L25
 450 0006 1B78     		ldrb	r3, [r3]
 451 0008 DBB2     		uxtb	r3, r3
 714:.\Generated_Source\PSoC5/PWM.c ****     }
 452              		.loc 1 714 0
 453 000a 1846     		mov	r0, r3
 454 000c BD46     		mov	sp, r7
 455              		.cfi_def_cfa_register 13
 456              		@ sp needed
 457 000e 5DF8047B 		ldr	r7, [sp], #4
 458              		.cfi_restore 7
 459              		.cfi_def_cfa_offset 0
 460 0012 7047     		bx	lr
 461              	.L26:
 462              		.align	2
 463              	.L25:
 464 0014 034F0040 		.word	1073762051
 465              		.cfi_endproc
 466              	.LFE7:
 467              		.size	PWM_ReadStatusRegister, .-PWM_ReadStatusRegister
 468              		.section	.text.PWM_ReadControlRegister,"ax",%progbits
 469              		.align	2
 470              		.global	PWM_ReadControlRegister
 471              		.thumb
 472              		.thumb_func
 473              		.type	PWM_ReadControlRegister, %function
 474              	PWM_ReadControlRegister:
 475              	.LFB8:
 715:.\Generated_Source\PSoC5/PWM.c **** 
 716:.\Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 717:.\Generated_Source\PSoC5/PWM.c **** 
 718:.\Generated_Source\PSoC5/PWM.c **** 
 719:.\Generated_Source\PSoC5/PWM.c **** #if (PWM_UseControl)
 720:.\Generated_Source\PSoC5/PWM.c **** 
 721:.\Generated_Source\PSoC5/PWM.c **** 
 722:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 22


 723:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadControlRegister
 724:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC5/PWM.c ****     *
 726:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 727:.\Generated_Source\PSoC5/PWM.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC5/PWM.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC5/PWM.c ****     *
 730:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 731:.\Generated_Source\PSoC5/PWM.c ****     *  None
 732:.\Generated_Source\PSoC5/PWM.c ****     *
 733:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 734:.\Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC5/PWM.c ****     *
 736:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC5/PWM.c ****     {
 476              		.loc 1 738 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 8
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480              		@ link register save eliminated.
 481 0000 80B4     		push	{r7}
 482              		.cfi_def_cfa_offset 4
 483              		.cfi_offset 7, -4
 484 0002 83B0     		sub	sp, sp, #12
 485              		.cfi_def_cfa_offset 16
 486 0004 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 739:.\Generated_Source\PSoC5/PWM.c ****         uint8 result;
 740:.\Generated_Source\PSoC5/PWM.c **** 
 741:.\Generated_Source\PSoC5/PWM.c ****         result = CY_GET_REG8(PWM_CONTROL_PTR);
 488              		.loc 1 741 0
 489 0006 054B     		ldr	r3, .L29
 490 0008 1B78     		ldrb	r3, [r3]
 491 000a FB71     		strb	r3, [r7, #7]
 742:.\Generated_Source\PSoC5/PWM.c ****         return (result);
 492              		.loc 1 742 0
 493 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 743:.\Generated_Source\PSoC5/PWM.c ****     }
 494              		.loc 1 743 0
 495 000e 1846     		mov	r0, r3
 496 0010 0C37     		adds	r7, r7, #12
 497              		.cfi_def_cfa_offset 4
 498 0012 BD46     		mov	sp, r7
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
 501 0014 5DF8047B 		ldr	r7, [sp], #4
 502              		.cfi_restore 7
 503              		.cfi_def_cfa_offset 0
 504 0018 7047     		bx	lr
 505              	.L30:
 506 001a 00BF     		.align	2
 507              	.L29:
 508 001c 004F0040 		.word	1073762048
 509              		.cfi_endproc
 510              	.LFE8:
 511              		.size	PWM_ReadControlRegister, .-PWM_ReadControlRegister
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 23


 512              		.section	.text.PWM_WriteControlRegister,"ax",%progbits
 513              		.align	2
 514              		.global	PWM_WriteControlRegister
 515              		.thumb
 516              		.thumb_func
 517              		.type	PWM_WriteControlRegister, %function
 518              	PWM_WriteControlRegister:
 519              	.LFB9:
 744:.\Generated_Source\PSoC5/PWM.c **** 
 745:.\Generated_Source\PSoC5/PWM.c **** 
 746:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteControlRegister
 748:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC5/PWM.c ****     *
 750:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 751:.\Generated_Source\PSoC5/PWM.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC5/PWM.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC5/PWM.c ****     *
 754:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 755:.\Generated_Source\PSoC5/PWM.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC5/PWM.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC5/PWM.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC5/PWM.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC5/PWM.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC5/PWM.c ****     *
 761:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 762:.\Generated_Source\PSoC5/PWM.c ****     *  None
 763:.\Generated_Source\PSoC5/PWM.c ****     *
 764:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC5/PWM.c ****     void PWM_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC5/PWM.c ****     {
 520              		.loc 1 766 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525 0000 80B4     		push	{r7}
 526              		.cfi_def_cfa_offset 4
 527              		.cfi_offset 7, -4
 528 0002 83B0     		sub	sp, sp, #12
 529              		.cfi_def_cfa_offset 16
 530 0004 00AF     		add	r7, sp, #0
 531              		.cfi_def_cfa_register 7
 532 0006 0346     		mov	r3, r0
 533 0008 FB71     		strb	r3, [r7, #7]
 767:.\Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_CONTROL_PTR, control);
 534              		.loc 1 767 0
 535 000a 044A     		ldr	r2, .L32
 536 000c FB79     		ldrb	r3, [r7, #7]
 537 000e 1370     		strb	r3, [r2]
 768:.\Generated_Source\PSoC5/PWM.c ****     }
 538              		.loc 1 768 0
 539 0010 0C37     		adds	r7, r7, #12
 540              		.cfi_def_cfa_offset 4
 541 0012 BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 24


 544 0014 5DF8047B 		ldr	r7, [sp], #4
 545              		.cfi_restore 7
 546              		.cfi_def_cfa_offset 0
 547 0018 7047     		bx	lr
 548              	.L33:
 549 001a 00BF     		.align	2
 550              	.L32:
 551 001c 004F0040 		.word	1073762048
 552              		.cfi_endproc
 553              	.LFE9:
 554              		.size	PWM_WriteControlRegister, .-PWM_WriteControlRegister
 555              		.section	.text.PWM_ReadCompare,"ax",%progbits
 556              		.align	2
 557              		.global	PWM_ReadCompare
 558              		.thumb
 559              		.thumb_func
 560              		.type	PWM_ReadCompare, %function
 561              	PWM_ReadCompare:
 562              	.LFB10:
 769:.\Generated_Source\PSoC5/PWM.c **** 
 770:.\Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseControl) */
 771:.\Generated_Source\PSoC5/PWM.c **** 
 772:.\Generated_Source\PSoC5/PWM.c **** 
 773:.\Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 774:.\Generated_Source\PSoC5/PWM.c **** 
 775:.\Generated_Source\PSoC5/PWM.c **** 
 776:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCapture
 778:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC5/PWM.c ****     *
 780:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 781:.\Generated_Source\PSoC5/PWM.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC5/PWM.c ****     *
 783:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 784:.\Generated_Source\PSoC5/PWM.c ****     *  None
 785:.\Generated_Source\PSoC5/PWM.c ****     *
 786:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 787:.\Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC5/PWM.c ****     *
 789:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCapture(void) 
 791:.\Generated_Source\PSoC5/PWM.c ****     {
 792:.\Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 793:.\Generated_Source\PSoC5/PWM.c ****     }
 794:.\Generated_Source\PSoC5/PWM.c **** 
 795:.\Generated_Source\PSoC5/PWM.c **** #endif /* (!PWM_UsingFixedFunction) */
 796:.\Generated_Source\PSoC5/PWM.c **** 
 797:.\Generated_Source\PSoC5/PWM.c **** 
 798:.\Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 799:.\Generated_Source\PSoC5/PWM.c **** 
 800:.\Generated_Source\PSoC5/PWM.c **** 
 801:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare
 803:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 804:.\Generated_Source\PSoC5/PWM.c ****     *
 805:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 806:.\Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 25


 807:.\Generated_Source\PSoC5/PWM.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC5/PWM.c ****     *
 809:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 810:.\Generated_Source\PSoC5/PWM.c ****     *  None
 811:.\Generated_Source\PSoC5/PWM.c ****     *
 812:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 813:.\Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC5/PWM.c ****     *
 815:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare(void) 
 817:.\Generated_Source\PSoC5/PWM.c ****     {
 563              		.loc 1 817 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568 0000 80B4     		push	{r7}
 569              		.cfi_def_cfa_offset 4
 570              		.cfi_offset 7, -4
 571 0002 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 818:.\Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 819:.\Generated_Source\PSoC5/PWM.c ****             return ((uint8)CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 573              		.loc 1 819 0
 574 0004 044B     		ldr	r3, .L36
 575 0006 1B88     		ldrh	r3, [r3]	@ movhi
 576 0008 9BB2     		uxth	r3, r3
 577 000a DBB2     		uxtb	r3, r3
 820:.\Generated_Source\PSoC5/PWM.c ****         #else
 821:.\Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 822:.\Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 823:.\Generated_Source\PSoC5/PWM.c ****     }
 578              		.loc 1 823 0
 579 000c 1846     		mov	r0, r3
 580 000e BD46     		mov	sp, r7
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 0010 5DF8047B 		ldr	r7, [sp], #4
 584              		.cfi_restore 7
 585              		.cfi_def_cfa_offset 0
 586 0014 7047     		bx	lr
 587              	.L37:
 588 0016 00BF     		.align	2
 589              	.L36:
 590 0018 064F0040 		.word	1073762054
 591              		.cfi_endproc
 592              	.LFE10:
 593              		.size	PWM_ReadCompare, .-PWM_ReadCompare
 594              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 595              		.align	2
 596              		.global	PWM_ReadPeriod
 597              		.thumb
 598              		.thumb_func
 599              		.type	PWM_ReadPeriod, %function
 600              	PWM_ReadPeriod:
 601              	.LFB11:
 824:.\Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 26


 825:.\Generated_Source\PSoC5/PWM.c **** #else
 826:.\Generated_Source\PSoC5/PWM.c **** 
 827:.\Generated_Source\PSoC5/PWM.c **** 
 828:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare1
 830:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC5/PWM.c ****     *
 832:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 833:.\Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC5/PWM.c ****     *
 835:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 836:.\Generated_Source\PSoC5/PWM.c ****     *  None
 837:.\Generated_Source\PSoC5/PWM.c ****     *
 838:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 839:.\Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC5/PWM.c ****     *
 841:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare1(void) 
 843:.\Generated_Source\PSoC5/PWM.c ****     {
 844:.\Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 845:.\Generated_Source\PSoC5/PWM.c ****     }
 846:.\Generated_Source\PSoC5/PWM.c **** 
 847:.\Generated_Source\PSoC5/PWM.c **** 
 848:.\Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare2
 850:.\Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC5/PWM.c ****     *
 852:.\Generated_Source\PSoC5/PWM.c ****     * Summary:
 853:.\Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC5/PWM.c ****     *
 855:.\Generated_Source\PSoC5/PWM.c ****     * Parameters:
 856:.\Generated_Source\PSoC5/PWM.c ****     *  None
 857:.\Generated_Source\PSoC5/PWM.c ****     *
 858:.\Generated_Source\PSoC5/PWM.c ****     * Return:
 859:.\Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC5/PWM.c ****     *
 861:.\Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare2(void) 
 863:.\Generated_Source\PSoC5/PWM.c ****     {
 864:.\Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE2_LSB_PTR));
 865:.\Generated_Source\PSoC5/PWM.c ****     }
 866:.\Generated_Source\PSoC5/PWM.c **** 
 867:.\Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseOneCompareMode) */
 868:.\Generated_Source\PSoC5/PWM.c **** 
 869:.\Generated_Source\PSoC5/PWM.c **** 
 870:.\Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_ReadPeriod
 872:.\Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 873:.\Generated_Source\PSoC5/PWM.c **** *
 874:.\Generated_Source\PSoC5/PWM.c **** * Summary:
 875:.\Generated_Source\PSoC5/PWM.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC5/PWM.c **** *
 877:.\Generated_Source\PSoC5/PWM.c **** * Parameters:
 878:.\Generated_Source\PSoC5/PWM.c **** *  None
 879:.\Generated_Source\PSoC5/PWM.c **** *
 880:.\Generated_Source\PSoC5/PWM.c **** * Return:
 881:.\Generated_Source\PSoC5/PWM.c **** *  uint8/16: Period value
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 27


 882:.\Generated_Source\PSoC5/PWM.c **** *
 883:.\Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC5/PWM.c **** uint8 PWM_ReadPeriod(void) 
 885:.\Generated_Source\PSoC5/PWM.c **** {
 602              		.loc 1 885 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 607 0000 80B4     		push	{r7}
 608              		.cfi_def_cfa_offset 4
 609              		.cfi_offset 7, -4
 610 0002 00AF     		add	r7, sp, #0
 611              		.cfi_def_cfa_register 7
 886:.\Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 887:.\Generated_Source\PSoC5/PWM.c ****         return ((uint8)CY_GET_REG16(PWM_PERIOD_LSB_PTR));
 612              		.loc 1 887 0
 613 0004 044B     		ldr	r3, .L40
 614 0006 1B88     		ldrh	r3, [r3]	@ movhi
 615 0008 9BB2     		uxth	r3, r3
 616 000a DBB2     		uxtb	r3, r3
 888:.\Generated_Source\PSoC5/PWM.c ****     #else
 889:.\Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_PERIOD_LSB_PTR));
 890:.\Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 891:.\Generated_Source\PSoC5/PWM.c **** }
 617              		.loc 1 891 0
 618 000c 1846     		mov	r0, r3
 619 000e BD46     		mov	sp, r7
 620              		.cfi_def_cfa_register 13
 621              		@ sp needed
 622 0010 5DF8047B 		ldr	r7, [sp], #4
 623              		.cfi_restore 7
 624              		.cfi_def_cfa_offset 0
 625 0014 7047     		bx	lr
 626              	.L41:
 627 0016 00BF     		.align	2
 628              	.L40:
 629 0018 044F0040 		.word	1073762052
 630              		.cfi_endproc
 631              	.LFE11:
 632              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 633              		.text
 634              	.Letext0:
 635              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 636              		.section	.debug_info,"",%progbits
 637              	.Ldebug_info0:
 638 0000 2A020000 		.4byte	0x22a
 639 0004 0400     		.2byte	0x4
 640 0006 00000000 		.4byte	.Ldebug_abbrev0
 641 000a 04       		.byte	0x4
 642 000b 01       		.uleb128 0x1
 643 000c DB000000 		.4byte	.LASF34
 644 0010 01       		.byte	0x1
 645 0011 4D000000 		.4byte	.LASF35
 646 0015 91000000 		.4byte	.LASF36
 647 0019 00000000 		.4byte	.Ldebug_ranges0+0
 648 001d 00000000 		.4byte	0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 28


 649 0021 00000000 		.4byte	.Ldebug_line0
 650 0025 02       		.uleb128 0x2
 651 0026 01       		.byte	0x1
 652 0027 06       		.byte	0x6
 653 0028 74020000 		.4byte	.LASF0
 654 002c 02       		.uleb128 0x2
 655 002d 01       		.byte	0x1
 656 002e 08       		.byte	0x8
 657 002f 3F000000 		.4byte	.LASF1
 658 0033 02       		.uleb128 0x2
 659 0034 02       		.byte	0x2
 660 0035 05       		.byte	0x5
 661 0036 31020000 		.4byte	.LASF2
 662 003a 02       		.uleb128 0x2
 663 003b 02       		.byte	0x2
 664 003c 07       		.byte	0x7
 665 003d 26000000 		.4byte	.LASF3
 666 0041 02       		.uleb128 0x2
 667 0042 04       		.byte	0x4
 668 0043 05       		.byte	0x5
 669 0044 4E020000 		.4byte	.LASF4
 670 0048 02       		.uleb128 0x2
 671 0049 04       		.byte	0x4
 672 004a 07       		.byte	0x7
 673 004b 71000000 		.4byte	.LASF5
 674 004f 02       		.uleb128 0x2
 675 0050 08       		.byte	0x8
 676 0051 05       		.byte	0x5
 677 0052 ED010000 		.4byte	.LASF6
 678 0056 02       		.uleb128 0x2
 679 0057 08       		.byte	0x8
 680 0058 07       		.byte	0x7
 681 0059 A1010000 		.4byte	.LASF7
 682 005d 03       		.uleb128 0x3
 683 005e 04       		.byte	0x4
 684 005f 05       		.byte	0x5
 685 0060 696E7400 		.ascii	"int\000"
 686 0064 02       		.uleb128 0x2
 687 0065 04       		.byte	0x4
 688 0066 07       		.byte	0x7
 689 0067 94010000 		.4byte	.LASF8
 690 006b 04       		.uleb128 0x4
 691 006c 83000000 		.4byte	.LASF9
 692 0070 02       		.byte	0x2
 693 0071 9201     		.2byte	0x192
 694 0073 2C000000 		.4byte	0x2c
 695 0077 04       		.uleb128 0x4
 696 0078 81010000 		.4byte	.LASF10
 697 007c 02       		.byte	0x2
 698 007d 9301     		.2byte	0x193
 699 007f 3A000000 		.4byte	0x3a
 700 0083 02       		.uleb128 0x2
 701 0084 04       		.byte	0x4
 702 0085 04       		.byte	0x4
 703 0086 39000000 		.4byte	.LASF11
 704 008a 02       		.uleb128 0x2
 705 008b 08       		.byte	0x8
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 29


 706 008c 04       		.byte	0x4
 707 008d 69010000 		.4byte	.LASF12
 708 0091 02       		.uleb128 0x2
 709 0092 01       		.byte	0x1
 710 0093 08       		.byte	0x8
 711 0094 57020000 		.4byte	.LASF13
 712 0098 04       		.uleb128 0x4
 713 0099 6C000000 		.4byte	.LASF14
 714 009d 02       		.byte	0x2
 715 009e 3C02     		.2byte	0x23c
 716 00a0 A4000000 		.4byte	0xa4
 717 00a4 05       		.uleb128 0x5
 718 00a5 6B000000 		.4byte	0x6b
 719 00a9 04       		.uleb128 0x4
 720 00aa 00000000 		.4byte	.LASF15
 721 00ae 02       		.byte	0x2
 722 00af 3D02     		.2byte	0x23d
 723 00b1 B5000000 		.4byte	0xb5
 724 00b5 05       		.uleb128 0x5
 725 00b6 77000000 		.4byte	0x77
 726 00ba 02       		.uleb128 0x2
 727 00bb 04       		.byte	0x4
 728 00bc 07       		.byte	0x7
 729 00bd E4010000 		.4byte	.LASF16
 730 00c1 06       		.uleb128 0x6
 731 00c2 3B020000 		.4byte	.LASF17
 732 00c6 01       		.byte	0x1
 733 00c7 37       		.byte	0x37
 734 00c8 00000000 		.4byte	.LFB0
 735 00cc 20000000 		.4byte	.LFE0-.LFB0
 736 00d0 01       		.uleb128 0x1
 737 00d1 9C       		.byte	0x9c
 738 00d2 07       		.uleb128 0x7
 739 00d3 16000000 		.4byte	.LASF20
 740 00d7 01       		.byte	0x1
 741 00d8 54       		.byte	0x54
 742 00d9 00000000 		.4byte	.LFB1
 743 00dd BC000000 		.4byte	.LFE1-.LFB1
 744 00e1 01       		.uleb128 0x1
 745 00e2 9C       		.byte	0x9c
 746 00e3 F6000000 		.4byte	0xf6
 747 00e7 08       		.uleb128 0x8
 748 00e8 AA020000 		.4byte	.LASF27
 749 00ec 01       		.byte	0x1
 750 00ed 57       		.byte	0x57
 751 00ee 6B000000 		.4byte	0x6b
 752 00f2 02       		.uleb128 0x2
 753 00f3 91       		.byte	0x91
 754 00f4 77       		.sleb128 -9
 755 00f5 00       		.byte	0
 756 00f6 09       		.uleb128 0x9
 757 00f7 88020000 		.4byte	.LASF18
 758 00fb 01       		.byte	0x1
 759 00fc C7       		.byte	0xc7
 760 00fd 00000000 		.4byte	.LFB2
 761 0101 48000000 		.4byte	.LFE2-.LFB2
 762 0105 01       		.uleb128 0x1
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 30


 763 0106 9C       		.byte	0x9c
 764 0107 09       		.uleb128 0x9
 765 0108 45020000 		.4byte	.LASF19
 766 010c 01       		.byte	0x1
 767 010d E9       		.byte	0xe9
 768 010e 00000000 		.4byte	.LFB3
 769 0112 48000000 		.4byte	.LFE3-.LFB3
 770 0116 01       		.uleb128 0x1
 771 0117 9C       		.byte	0x9c
 772 0118 0A       		.uleb128 0xa
 773 0119 BF010000 		.4byte	.LASF21
 774 011d 01       		.byte	0x1
 775 011e E201     		.2byte	0x1e2
 776 0120 00000000 		.4byte	.LFB4
 777 0124 20000000 		.4byte	.LFE4-.LFB4
 778 0128 01       		.uleb128 0x1
 779 0129 9C       		.byte	0x9c
 780 012a 3E010000 		.4byte	0x13e
 781 012e 0B       		.uleb128 0xb
 782 012f 1F000000 		.4byte	.LASF23
 783 0133 01       		.byte	0x1
 784 0134 E201     		.2byte	0x1e2
 785 0136 6B000000 		.4byte	0x6b
 786 013a 02       		.uleb128 0x2
 787 013b 91       		.byte	0x91
 788 013c 77       		.sleb128 -9
 789 013d 00       		.byte	0
 790 013e 0A       		.uleb128 0xa
 791 013f 70010000 		.4byte	.LASF22
 792 0143 01       		.byte	0x1
 793 0144 0402     		.2byte	0x204
 794 0146 00000000 		.4byte	.LFB5
 795 014a 20000000 		.4byte	.LFE5-.LFB5
 796 014e 01       		.uleb128 0x1
 797 014f 9C       		.byte	0x9c
 798 0150 64010000 		.4byte	0x164
 799 0154 0B       		.uleb128 0xb
 800 0155 80020000 		.4byte	.LASF24
 801 0159 01       		.byte	0x1
 802 015a 0402     		.2byte	0x204
 803 015c 6B000000 		.4byte	0x6b
 804 0160 02       		.uleb128 0x2
 805 0161 91       		.byte	0x91
 806 0162 77       		.sleb128 -9
 807 0163 00       		.byte	0
 808 0164 0A       		.uleb128 0xa
 809 0165 CF010000 		.4byte	.LASF25
 810 0169 01       		.byte	0x1
 811 016a AC02     		.2byte	0x2ac
 812 016c 00000000 		.4byte	.LFB6
 813 0170 20000000 		.4byte	.LFE6-.LFB6
 814 0174 01       		.uleb128 0x1
 815 0175 9C       		.byte	0x9c
 816 0176 8A010000 		.4byte	0x18a
 817 017a 0B       		.uleb128 0xb
 818 017b FB010000 		.4byte	.LASF26
 819 017f 01       		.byte	0x1
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 31


 820 0180 AC02     		.2byte	0x2ac
 821 0182 6B000000 		.4byte	0x6b
 822 0186 02       		.uleb128 0x2
 823 0187 91       		.byte	0x91
 824 0188 77       		.sleb128 -9
 825 0189 00       		.byte	0
 826 018a 0C       		.uleb128 0xc
 827 018b 93020000 		.4byte	.LASF31
 828 018f 01       		.byte	0x1
 829 0190 C702     		.2byte	0x2c7
 830 0192 6B000000 		.4byte	0x6b
 831 0196 00000000 		.4byte	.LFB7
 832 019a 18000000 		.4byte	.LFE7-.LFB7
 833 019e 01       		.uleb128 0x1
 834 019f 9C       		.byte	0x9c
 835 01a0 0D       		.uleb128 0xd
 836 01a1 5C020000 		.4byte	.LASF37
 837 01a5 01       		.byte	0x1
 838 01a6 E102     		.2byte	0x2e1
 839 01a8 6B000000 		.4byte	0x6b
 840 01ac 00000000 		.4byte	.LFB8
 841 01b0 20000000 		.4byte	.LFE8-.LFB8
 842 01b4 01       		.uleb128 0x1
 843 01b5 9C       		.byte	0x9c
 844 01b6 CA010000 		.4byte	0x1ca
 845 01ba 0E       		.uleb128 0xe
 846 01bb B8010000 		.4byte	.LASF28
 847 01bf 01       		.byte	0x1
 848 01c0 E302     		.2byte	0x2e3
 849 01c2 6B000000 		.4byte	0x6b
 850 01c6 02       		.uleb128 0x2
 851 01c7 91       		.byte	0x91
 852 01c8 77       		.sleb128 -9
 853 01c9 00       		.byte	0
 854 01ca 0A       		.uleb128 0xa
 855 01cb 09020000 		.4byte	.LASF29
 856 01cf 01       		.byte	0x1
 857 01d0 FD02     		.2byte	0x2fd
 858 01d2 00000000 		.4byte	.LFB9
 859 01d6 20000000 		.4byte	.LFE9-.LFB9
 860 01da 01       		.uleb128 0x1
 861 01db 9C       		.byte	0x9c
 862 01dc F0010000 		.4byte	0x1f0
 863 01e0 0B       		.uleb128 0xb
 864 01e1 89000000 		.4byte	.LASF30
 865 01e5 01       		.byte	0x1
 866 01e6 FD02     		.2byte	0x2fd
 867 01e8 6B000000 		.4byte	0x6b
 868 01ec 02       		.uleb128 0x2
 869 01ed 91       		.byte	0x91
 870 01ee 77       		.sleb128 -9
 871 01ef 00       		.byte	0
 872 01f0 0C       		.uleb128 0xc
 873 01f1 06000000 		.4byte	.LASF32
 874 01f5 01       		.byte	0x1
 875 01f6 3003     		.2byte	0x330
 876 01f8 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 32


 877 01fc 00000000 		.4byte	.LFB10
 878 0200 1C000000 		.4byte	.LFE10-.LFB10
 879 0204 01       		.uleb128 0x1
 880 0205 9C       		.byte	0x9c
 881 0206 0C       		.uleb128 0xc
 882 0207 22020000 		.4byte	.LASF33
 883 020b 01       		.byte	0x1
 884 020c 7403     		.2byte	0x374
 885 020e 6B000000 		.4byte	0x6b
 886 0212 00000000 		.4byte	.LFB11
 887 0216 1C000000 		.4byte	.LFE11-.LFB11
 888 021a 01       		.uleb128 0x1
 889 021b 9C       		.byte	0x9c
 890 021c 0F       		.uleb128 0xf
 891 021d 88010000 		.4byte	.LASF38
 892 0221 01       		.byte	0x1
 893 0222 20       		.byte	0x20
 894 0223 6B000000 		.4byte	0x6b
 895 0227 05       		.uleb128 0x5
 896 0228 03       		.byte	0x3
 897 0229 00000000 		.4byte	PWM_initVar
 898 022d 00       		.byte	0
 899              		.section	.debug_abbrev,"",%progbits
 900              	.Ldebug_abbrev0:
 901 0000 01       		.uleb128 0x1
 902 0001 11       		.uleb128 0x11
 903 0002 01       		.byte	0x1
 904 0003 25       		.uleb128 0x25
 905 0004 0E       		.uleb128 0xe
 906 0005 13       		.uleb128 0x13
 907 0006 0B       		.uleb128 0xb
 908 0007 03       		.uleb128 0x3
 909 0008 0E       		.uleb128 0xe
 910 0009 1B       		.uleb128 0x1b
 911 000a 0E       		.uleb128 0xe
 912 000b 55       		.uleb128 0x55
 913 000c 17       		.uleb128 0x17
 914 000d 11       		.uleb128 0x11
 915 000e 01       		.uleb128 0x1
 916 000f 10       		.uleb128 0x10
 917 0010 17       		.uleb128 0x17
 918 0011 00       		.byte	0
 919 0012 00       		.byte	0
 920 0013 02       		.uleb128 0x2
 921 0014 24       		.uleb128 0x24
 922 0015 00       		.byte	0
 923 0016 0B       		.uleb128 0xb
 924 0017 0B       		.uleb128 0xb
 925 0018 3E       		.uleb128 0x3e
 926 0019 0B       		.uleb128 0xb
 927 001a 03       		.uleb128 0x3
 928 001b 0E       		.uleb128 0xe
 929 001c 00       		.byte	0
 930 001d 00       		.byte	0
 931 001e 03       		.uleb128 0x3
 932 001f 24       		.uleb128 0x24
 933 0020 00       		.byte	0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 33


 934 0021 0B       		.uleb128 0xb
 935 0022 0B       		.uleb128 0xb
 936 0023 3E       		.uleb128 0x3e
 937 0024 0B       		.uleb128 0xb
 938 0025 03       		.uleb128 0x3
 939 0026 08       		.uleb128 0x8
 940 0027 00       		.byte	0
 941 0028 00       		.byte	0
 942 0029 04       		.uleb128 0x4
 943 002a 16       		.uleb128 0x16
 944 002b 00       		.byte	0
 945 002c 03       		.uleb128 0x3
 946 002d 0E       		.uleb128 0xe
 947 002e 3A       		.uleb128 0x3a
 948 002f 0B       		.uleb128 0xb
 949 0030 3B       		.uleb128 0x3b
 950 0031 05       		.uleb128 0x5
 951 0032 49       		.uleb128 0x49
 952 0033 13       		.uleb128 0x13
 953 0034 00       		.byte	0
 954 0035 00       		.byte	0
 955 0036 05       		.uleb128 0x5
 956 0037 35       		.uleb128 0x35
 957 0038 00       		.byte	0
 958 0039 49       		.uleb128 0x49
 959 003a 13       		.uleb128 0x13
 960 003b 00       		.byte	0
 961 003c 00       		.byte	0
 962 003d 06       		.uleb128 0x6
 963 003e 2E       		.uleb128 0x2e
 964 003f 00       		.byte	0
 965 0040 3F       		.uleb128 0x3f
 966 0041 19       		.uleb128 0x19
 967 0042 03       		.uleb128 0x3
 968 0043 0E       		.uleb128 0xe
 969 0044 3A       		.uleb128 0x3a
 970 0045 0B       		.uleb128 0xb
 971 0046 3B       		.uleb128 0x3b
 972 0047 0B       		.uleb128 0xb
 973 0048 27       		.uleb128 0x27
 974 0049 19       		.uleb128 0x19
 975 004a 11       		.uleb128 0x11
 976 004b 01       		.uleb128 0x1
 977 004c 12       		.uleb128 0x12
 978 004d 06       		.uleb128 0x6
 979 004e 40       		.uleb128 0x40
 980 004f 18       		.uleb128 0x18
 981 0050 9642     		.uleb128 0x2116
 982 0052 19       		.uleb128 0x19
 983 0053 00       		.byte	0
 984 0054 00       		.byte	0
 985 0055 07       		.uleb128 0x7
 986 0056 2E       		.uleb128 0x2e
 987 0057 01       		.byte	0x1
 988 0058 3F       		.uleb128 0x3f
 989 0059 19       		.uleb128 0x19
 990 005a 03       		.uleb128 0x3
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 34


 991 005b 0E       		.uleb128 0xe
 992 005c 3A       		.uleb128 0x3a
 993 005d 0B       		.uleb128 0xb
 994 005e 3B       		.uleb128 0x3b
 995 005f 0B       		.uleb128 0xb
 996 0060 27       		.uleb128 0x27
 997 0061 19       		.uleb128 0x19
 998 0062 11       		.uleb128 0x11
 999 0063 01       		.uleb128 0x1
 1000 0064 12       		.uleb128 0x12
 1001 0065 06       		.uleb128 0x6
 1002 0066 40       		.uleb128 0x40
 1003 0067 18       		.uleb128 0x18
 1004 0068 9642     		.uleb128 0x2116
 1005 006a 19       		.uleb128 0x19
 1006 006b 01       		.uleb128 0x1
 1007 006c 13       		.uleb128 0x13
 1008 006d 00       		.byte	0
 1009 006e 00       		.byte	0
 1010 006f 08       		.uleb128 0x8
 1011 0070 34       		.uleb128 0x34
 1012 0071 00       		.byte	0
 1013 0072 03       		.uleb128 0x3
 1014 0073 0E       		.uleb128 0xe
 1015 0074 3A       		.uleb128 0x3a
 1016 0075 0B       		.uleb128 0xb
 1017 0076 3B       		.uleb128 0x3b
 1018 0077 0B       		.uleb128 0xb
 1019 0078 49       		.uleb128 0x49
 1020 0079 13       		.uleb128 0x13
 1021 007a 02       		.uleb128 0x2
 1022 007b 18       		.uleb128 0x18
 1023 007c 00       		.byte	0
 1024 007d 00       		.byte	0
 1025 007e 09       		.uleb128 0x9
 1026 007f 2E       		.uleb128 0x2e
 1027 0080 00       		.byte	0
 1028 0081 3F       		.uleb128 0x3f
 1029 0082 19       		.uleb128 0x19
 1030 0083 03       		.uleb128 0x3
 1031 0084 0E       		.uleb128 0xe
 1032 0085 3A       		.uleb128 0x3a
 1033 0086 0B       		.uleb128 0xb
 1034 0087 3B       		.uleb128 0x3b
 1035 0088 0B       		.uleb128 0xb
 1036 0089 27       		.uleb128 0x27
 1037 008a 19       		.uleb128 0x19
 1038 008b 11       		.uleb128 0x11
 1039 008c 01       		.uleb128 0x1
 1040 008d 12       		.uleb128 0x12
 1041 008e 06       		.uleb128 0x6
 1042 008f 40       		.uleb128 0x40
 1043 0090 18       		.uleb128 0x18
 1044 0091 9742     		.uleb128 0x2117
 1045 0093 19       		.uleb128 0x19
 1046 0094 00       		.byte	0
 1047 0095 00       		.byte	0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 35


 1048 0096 0A       		.uleb128 0xa
 1049 0097 2E       		.uleb128 0x2e
 1050 0098 01       		.byte	0x1
 1051 0099 3F       		.uleb128 0x3f
 1052 009a 19       		.uleb128 0x19
 1053 009b 03       		.uleb128 0x3
 1054 009c 0E       		.uleb128 0xe
 1055 009d 3A       		.uleb128 0x3a
 1056 009e 0B       		.uleb128 0xb
 1057 009f 3B       		.uleb128 0x3b
 1058 00a0 05       		.uleb128 0x5
 1059 00a1 27       		.uleb128 0x27
 1060 00a2 19       		.uleb128 0x19
 1061 00a3 11       		.uleb128 0x11
 1062 00a4 01       		.uleb128 0x1
 1063 00a5 12       		.uleb128 0x12
 1064 00a6 06       		.uleb128 0x6
 1065 00a7 40       		.uleb128 0x40
 1066 00a8 18       		.uleb128 0x18
 1067 00a9 9742     		.uleb128 0x2117
 1068 00ab 19       		.uleb128 0x19
 1069 00ac 01       		.uleb128 0x1
 1070 00ad 13       		.uleb128 0x13
 1071 00ae 00       		.byte	0
 1072 00af 00       		.byte	0
 1073 00b0 0B       		.uleb128 0xb
 1074 00b1 05       		.uleb128 0x5
 1075 00b2 00       		.byte	0
 1076 00b3 03       		.uleb128 0x3
 1077 00b4 0E       		.uleb128 0xe
 1078 00b5 3A       		.uleb128 0x3a
 1079 00b6 0B       		.uleb128 0xb
 1080 00b7 3B       		.uleb128 0x3b
 1081 00b8 05       		.uleb128 0x5
 1082 00b9 49       		.uleb128 0x49
 1083 00ba 13       		.uleb128 0x13
 1084 00bb 02       		.uleb128 0x2
 1085 00bc 18       		.uleb128 0x18
 1086 00bd 00       		.byte	0
 1087 00be 00       		.byte	0
 1088 00bf 0C       		.uleb128 0xc
 1089 00c0 2E       		.uleb128 0x2e
 1090 00c1 00       		.byte	0
 1091 00c2 3F       		.uleb128 0x3f
 1092 00c3 19       		.uleb128 0x19
 1093 00c4 03       		.uleb128 0x3
 1094 00c5 0E       		.uleb128 0xe
 1095 00c6 3A       		.uleb128 0x3a
 1096 00c7 0B       		.uleb128 0xb
 1097 00c8 3B       		.uleb128 0x3b
 1098 00c9 05       		.uleb128 0x5
 1099 00ca 27       		.uleb128 0x27
 1100 00cb 19       		.uleb128 0x19
 1101 00cc 49       		.uleb128 0x49
 1102 00cd 13       		.uleb128 0x13
 1103 00ce 11       		.uleb128 0x11
 1104 00cf 01       		.uleb128 0x1
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 36


 1105 00d0 12       		.uleb128 0x12
 1106 00d1 06       		.uleb128 0x6
 1107 00d2 40       		.uleb128 0x40
 1108 00d3 18       		.uleb128 0x18
 1109 00d4 9742     		.uleb128 0x2117
 1110 00d6 19       		.uleb128 0x19
 1111 00d7 00       		.byte	0
 1112 00d8 00       		.byte	0
 1113 00d9 0D       		.uleb128 0xd
 1114 00da 2E       		.uleb128 0x2e
 1115 00db 01       		.byte	0x1
 1116 00dc 3F       		.uleb128 0x3f
 1117 00dd 19       		.uleb128 0x19
 1118 00de 03       		.uleb128 0x3
 1119 00df 0E       		.uleb128 0xe
 1120 00e0 3A       		.uleb128 0x3a
 1121 00e1 0B       		.uleb128 0xb
 1122 00e2 3B       		.uleb128 0x3b
 1123 00e3 05       		.uleb128 0x5
 1124 00e4 27       		.uleb128 0x27
 1125 00e5 19       		.uleb128 0x19
 1126 00e6 49       		.uleb128 0x49
 1127 00e7 13       		.uleb128 0x13
 1128 00e8 11       		.uleb128 0x11
 1129 00e9 01       		.uleb128 0x1
 1130 00ea 12       		.uleb128 0x12
 1131 00eb 06       		.uleb128 0x6
 1132 00ec 40       		.uleb128 0x40
 1133 00ed 18       		.uleb128 0x18
 1134 00ee 9742     		.uleb128 0x2117
 1135 00f0 19       		.uleb128 0x19
 1136 00f1 01       		.uleb128 0x1
 1137 00f2 13       		.uleb128 0x13
 1138 00f3 00       		.byte	0
 1139 00f4 00       		.byte	0
 1140 00f5 0E       		.uleb128 0xe
 1141 00f6 34       		.uleb128 0x34
 1142 00f7 00       		.byte	0
 1143 00f8 03       		.uleb128 0x3
 1144 00f9 0E       		.uleb128 0xe
 1145 00fa 3A       		.uleb128 0x3a
 1146 00fb 0B       		.uleb128 0xb
 1147 00fc 3B       		.uleb128 0x3b
 1148 00fd 05       		.uleb128 0x5
 1149 00fe 49       		.uleb128 0x49
 1150 00ff 13       		.uleb128 0x13
 1151 0100 02       		.uleb128 0x2
 1152 0101 18       		.uleb128 0x18
 1153 0102 00       		.byte	0
 1154 0103 00       		.byte	0
 1155 0104 0F       		.uleb128 0xf
 1156 0105 34       		.uleb128 0x34
 1157 0106 00       		.byte	0
 1158 0107 03       		.uleb128 0x3
 1159 0108 0E       		.uleb128 0xe
 1160 0109 3A       		.uleb128 0x3a
 1161 010a 0B       		.uleb128 0xb
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 37


 1162 010b 3B       		.uleb128 0x3b
 1163 010c 0B       		.uleb128 0xb
 1164 010d 49       		.uleb128 0x49
 1165 010e 13       		.uleb128 0x13
 1166 010f 3F       		.uleb128 0x3f
 1167 0110 19       		.uleb128 0x19
 1168 0111 02       		.uleb128 0x2
 1169 0112 18       		.uleb128 0x18
 1170 0113 00       		.byte	0
 1171 0114 00       		.byte	0
 1172 0115 00       		.byte	0
 1173              		.section	.debug_aranges,"",%progbits
 1174 0000 74000000 		.4byte	0x74
 1175 0004 0200     		.2byte	0x2
 1176 0006 00000000 		.4byte	.Ldebug_info0
 1177 000a 04       		.byte	0x4
 1178 000b 00       		.byte	0
 1179 000c 0000     		.2byte	0
 1180 000e 0000     		.2byte	0
 1181 0010 00000000 		.4byte	.LFB0
 1182 0014 20000000 		.4byte	.LFE0-.LFB0
 1183 0018 00000000 		.4byte	.LFB1
 1184 001c BC000000 		.4byte	.LFE1-.LFB1
 1185 0020 00000000 		.4byte	.LFB2
 1186 0024 48000000 		.4byte	.LFE2-.LFB2
 1187 0028 00000000 		.4byte	.LFB3
 1188 002c 48000000 		.4byte	.LFE3-.LFB3
 1189 0030 00000000 		.4byte	.LFB4
 1190 0034 20000000 		.4byte	.LFE4-.LFB4
 1191 0038 00000000 		.4byte	.LFB5
 1192 003c 20000000 		.4byte	.LFE5-.LFB5
 1193 0040 00000000 		.4byte	.LFB6
 1194 0044 20000000 		.4byte	.LFE6-.LFB6
 1195 0048 00000000 		.4byte	.LFB7
 1196 004c 18000000 		.4byte	.LFE7-.LFB7
 1197 0050 00000000 		.4byte	.LFB8
 1198 0054 20000000 		.4byte	.LFE8-.LFB8
 1199 0058 00000000 		.4byte	.LFB9
 1200 005c 20000000 		.4byte	.LFE9-.LFB9
 1201 0060 00000000 		.4byte	.LFB10
 1202 0064 1C000000 		.4byte	.LFE10-.LFB10
 1203 0068 00000000 		.4byte	.LFB11
 1204 006c 1C000000 		.4byte	.LFE11-.LFB11
 1205 0070 00000000 		.4byte	0
 1206 0074 00000000 		.4byte	0
 1207              		.section	.debug_ranges,"",%progbits
 1208              	.Ldebug_ranges0:
 1209 0000 00000000 		.4byte	.LFB0
 1210 0004 20000000 		.4byte	.LFE0
 1211 0008 00000000 		.4byte	.LFB1
 1212 000c BC000000 		.4byte	.LFE1
 1213 0010 00000000 		.4byte	.LFB2
 1214 0014 48000000 		.4byte	.LFE2
 1215 0018 00000000 		.4byte	.LFB3
 1216 001c 48000000 		.4byte	.LFE3
 1217 0020 00000000 		.4byte	.LFB4
 1218 0024 20000000 		.4byte	.LFE4
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 38


 1219 0028 00000000 		.4byte	.LFB5
 1220 002c 20000000 		.4byte	.LFE5
 1221 0030 00000000 		.4byte	.LFB6
 1222 0034 20000000 		.4byte	.LFE6
 1223 0038 00000000 		.4byte	.LFB7
 1224 003c 18000000 		.4byte	.LFE7
 1225 0040 00000000 		.4byte	.LFB8
 1226 0044 20000000 		.4byte	.LFE8
 1227 0048 00000000 		.4byte	.LFB9
 1228 004c 20000000 		.4byte	.LFE9
 1229 0050 00000000 		.4byte	.LFB10
 1230 0054 1C000000 		.4byte	.LFE10
 1231 0058 00000000 		.4byte	.LFB11
 1232 005c 1C000000 		.4byte	.LFE11
 1233 0060 00000000 		.4byte	0
 1234 0064 00000000 		.4byte	0
 1235              		.section	.debug_line,"",%progbits
 1236              	.Ldebug_line0:
 1237 0000 3C010000 		.section	.debug_str,"MS",%progbits,1
 1237      02004200 
 1237      00000201 
 1237      FB0E0D00 
 1237      01010101 
 1238              	.LASF15:
 1239 0000 72656731 		.ascii	"reg16\000"
 1239      3600
 1240              	.LASF32:
 1241 0006 50574D5F 		.ascii	"PWM_ReadCompare\000"
 1241      52656164 
 1241      436F6D70 
 1241      61726500 
 1242              	.LASF20:
 1243 0016 50574D5F 		.ascii	"PWM_Init\000"
 1243      496E6974 
 1243      00
 1244              	.LASF23:
 1245 001f 70657269 		.ascii	"period\000"
 1245      6F6400
 1246              	.LASF3:
 1247 0026 73686F72 		.ascii	"short unsigned int\000"
 1247      7420756E 
 1247      7369676E 
 1247      65642069 
 1247      6E7400
 1248              	.LASF11:
 1249 0039 666C6F61 		.ascii	"float\000"
 1249      7400
 1250              	.LASF1:
 1251 003f 756E7369 		.ascii	"unsigned char\000"
 1251      676E6564 
 1251      20636861 
 1251      7200
 1252              	.LASF35:
 1253 004d 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\PWM.c\000"
 1253      6E657261 
 1253      7465645F 
 1253      536F7572 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 39


 1253      63655C50 
 1254              	.LASF14:
 1255 006c 72656738 		.ascii	"reg8\000"
 1255      00
 1256              	.LASF5:
 1257 0071 6C6F6E67 		.ascii	"long unsigned int\000"
 1257      20756E73 
 1257      69676E65 
 1257      6420696E 
 1257      7400
 1258              	.LASF9:
 1259 0083 75696E74 		.ascii	"uint8\000"
 1259      3800
 1260              	.LASF30:
 1261 0089 636F6E74 		.ascii	"control\000"
 1261      726F6C00 
 1262              	.LASF36:
 1263 0091 433A5C55 		.ascii	"C:\\Users\\cruiser\\Documents\\PSoC Creator\\Voltro"
 1263      73657273 
 1263      5C637275 
 1263      69736572 
 1263      5C446F63 
 1264 00bf 6E5C4865 		.ascii	"n\\HelloWorld_Blinky01.cydsn\000"
 1264      6C6C6F57 
 1264      6F726C64 
 1264      5F426C69 
 1264      6E6B7930 
 1265              	.LASF34:
 1266 00db 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1266      4320342E 
 1266      392E3320 
 1266      32303135 
 1266      30333033 
 1267 010e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1267      20726576 
 1267      6973696F 
 1267      6E203232 
 1267      31323230 
 1268 0141 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1268      66756E63 
 1268      74696F6E 
 1268      2D736563 
 1268      74696F6E 
 1269              	.LASF12:
 1270 0169 646F7562 		.ascii	"double\000"
 1270      6C6500
 1271              	.LASF22:
 1272 0170 50574D5F 		.ascii	"PWM_WriteCompare\000"
 1272      57726974 
 1272      65436F6D 
 1272      70617265 
 1272      00
 1273              	.LASF10:
 1274 0181 75696E74 		.ascii	"uint16\000"
 1274      313600
 1275              	.LASF38:
 1276 0188 50574D5F 		.ascii	"PWM_initVar\000"
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 40


 1276      696E6974 
 1276      56617200 
 1277              	.LASF8:
 1278 0194 756E7369 		.ascii	"unsigned int\000"
 1278      676E6564 
 1278      20696E74 
 1278      00
 1279              	.LASF7:
 1280 01a1 6C6F6E67 		.ascii	"long long unsigned int\000"
 1280      206C6F6E 
 1280      6720756E 
 1280      7369676E 
 1280      65642069 
 1281              	.LASF28:
 1282 01b8 72657375 		.ascii	"result\000"
 1282      6C7400
 1283              	.LASF21:
 1284 01bf 50574D5F 		.ascii	"PWM_WritePeriod\000"
 1284      57726974 
 1284      65506572 
 1284      696F6400 
 1285              	.LASF25:
 1286 01cf 50574D5F 		.ascii	"PWM_SetInterruptMode\000"
 1286      53657449 
 1286      6E746572 
 1286      72757074 
 1286      4D6F6465 
 1287              	.LASF16:
 1288 01e4 73697A65 		.ascii	"sizetype\000"
 1288      74797065 
 1288      00
 1289              	.LASF6:
 1290 01ed 6C6F6E67 		.ascii	"long long int\000"
 1290      206C6F6E 
 1290      6720696E 
 1290      7400
 1291              	.LASF26:
 1292 01fb 696E7465 		.ascii	"interruptMode\000"
 1292      72727570 
 1292      744D6F64 
 1292      6500
 1293              	.LASF29:
 1294 0209 50574D5F 		.ascii	"PWM_WriteControlRegister\000"
 1294      57726974 
 1294      65436F6E 
 1294      74726F6C 
 1294      52656769 
 1295              	.LASF33:
 1296 0222 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 1296      52656164 
 1296      50657269 
 1296      6F6400
 1297              	.LASF2:
 1298 0231 73686F72 		.ascii	"short int\000"
 1298      7420696E 
 1298      7400
 1299              	.LASF17:
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccuRIvlW.s 			page 41


 1300 023b 50574D5F 		.ascii	"PWM_Start\000"
 1300      53746172 
 1300      7400
 1301              	.LASF19:
 1302 0245 50574D5F 		.ascii	"PWM_Stop\000"
 1302      53746F70 
 1302      00
 1303              	.LASF4:
 1304 024e 6C6F6E67 		.ascii	"long int\000"
 1304      20696E74 
 1304      00
 1305              	.LASF13:
 1306 0257 63686172 		.ascii	"char\000"
 1306      00
 1307              	.LASF37:
 1308 025c 50574D5F 		.ascii	"PWM_ReadControlRegister\000"
 1308      52656164 
 1308      436F6E74 
 1308      726F6C52 
 1308      65676973 
 1309              	.LASF0:
 1310 0274 7369676E 		.ascii	"signed char\000"
 1310      65642063 
 1310      68617200 
 1311              	.LASF24:
 1312 0280 636F6D70 		.ascii	"compare\000"
 1312      61726500 
 1313              	.LASF18:
 1314 0288 50574D5F 		.ascii	"PWM_Enable\000"
 1314      456E6162 
 1314      6C6500
 1315              	.LASF31:
 1316 0293 50574D5F 		.ascii	"PWM_ReadStatusRegister\000"
 1316      52656164 
 1316      53746174 
 1316      75735265 
 1316      67697374 
 1317              	.LASF27:
 1318 02aa 6374726C 		.ascii	"ctrl\000"
 1318      00
 1319              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
