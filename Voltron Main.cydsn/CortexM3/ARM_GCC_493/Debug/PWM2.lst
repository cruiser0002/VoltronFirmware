ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM2.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM2_Enable,"ax",%progbits
  19              		.align	2
  20              		.global	PWM2_Enable
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM2_Enable, %function
  24              	PWM2_Enable:
  25              	.LFB2:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\PWM2.c"
   1:.\Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/PWM2.c **** * File Name: PWM2.c
   3:.\Generated_Source\PSoC5/PWM2.c **** * Version 3.30
   4:.\Generated_Source\PSoC5/PWM2.c **** *
   5:.\Generated_Source\PSoC5/PWM2.c **** * Description:
   6:.\Generated_Source\PSoC5/PWM2.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC5/PWM2.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC5/PWM2.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC5/PWM2.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC5/PWM2.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC5/PWM2.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC5/PWM2.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC5/PWM2.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC5/PWM2.c **** *
  15:.\Generated_Source\PSoC5/PWM2.c **** * Note:
  16:.\Generated_Source\PSoC5/PWM2.c **** *
  17:.\Generated_Source\PSoC5/PWM2.c **** *******************************************************************************
  18:.\Generated_Source\PSoC5/PWM2.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC5/PWM2.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC5/PWM2.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC5/PWM2.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC5/PWM2.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC5/PWM2.c **** 
  24:.\Generated_Source\PSoC5/PWM2.c **** #include "PWM2.h"
  25:.\Generated_Source\PSoC5/PWM2.c **** 
  26:.\Generated_Source\PSoC5/PWM2.c **** /* Error message for removed <resource> through optimization */
  27:.\Generated_Source\PSoC5/PWM2.c **** #ifdef PWM2_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC5/PWM2.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC5/PWM2.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC5/PWM2.c **** #endif /* PWM2_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC5/PWM2.c **** 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 2


  32:.\Generated_Source\PSoC5/PWM2.c **** uint8 PWM2_initVar = 0u;
  33:.\Generated_Source\PSoC5/PWM2.c **** 
  34:.\Generated_Source\PSoC5/PWM2.c **** 
  35:.\Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Start
  37:.\Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
  38:.\Generated_Source\PSoC5/PWM2.c **** *
  39:.\Generated_Source\PSoC5/PWM2.c **** * Summary:
  40:.\Generated_Source\PSoC5/PWM2.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC5/PWM2.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC5/PWM2.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC5/PWM2.c **** *
  44:.\Generated_Source\PSoC5/PWM2.c **** * Parameters:
  45:.\Generated_Source\PSoC5/PWM2.c **** *  None
  46:.\Generated_Source\PSoC5/PWM2.c **** *
  47:.\Generated_Source\PSoC5/PWM2.c **** * Return:
  48:.\Generated_Source\PSoC5/PWM2.c **** *  None
  49:.\Generated_Source\PSoC5/PWM2.c **** *
  50:.\Generated_Source\PSoC5/PWM2.c **** * Global variables:
  51:.\Generated_Source\PSoC5/PWM2.c **** *  PWM2_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC5/PWM2.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC5/PWM2.c **** *
  54:.\Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC5/PWM2.c **** void PWM2_Start(void) 
  56:.\Generated_Source\PSoC5/PWM2.c **** {
  57:.\Generated_Source\PSoC5/PWM2.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC5/PWM2.c ****     if(PWM2_initVar == 0u)
  59:.\Generated_Source\PSoC5/PWM2.c ****     {
  60:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_Init();
  61:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_initVar = 1u;
  62:.\Generated_Source\PSoC5/PWM2.c ****     }
  63:.\Generated_Source\PSoC5/PWM2.c ****     PWM2_Enable();
  64:.\Generated_Source\PSoC5/PWM2.c **** 
  65:.\Generated_Source\PSoC5/PWM2.c **** }
  66:.\Generated_Source\PSoC5/PWM2.c **** 
  67:.\Generated_Source\PSoC5/PWM2.c **** 
  68:.\Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Init
  70:.\Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
  71:.\Generated_Source\PSoC5/PWM2.c **** *
  72:.\Generated_Source\PSoC5/PWM2.c **** * Summary:
  73:.\Generated_Source\PSoC5/PWM2.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC5/PWM2.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC5/PWM2.c **** *  PWM2_Start().
  76:.\Generated_Source\PSoC5/PWM2.c **** *
  77:.\Generated_Source\PSoC5/PWM2.c **** * Parameters:
  78:.\Generated_Source\PSoC5/PWM2.c **** *  None
  79:.\Generated_Source\PSoC5/PWM2.c **** *
  80:.\Generated_Source\PSoC5/PWM2.c **** * Return:
  81:.\Generated_Source\PSoC5/PWM2.c **** *  None
  82:.\Generated_Source\PSoC5/PWM2.c **** *
  83:.\Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC5/PWM2.c **** void PWM2_Init(void) 
  85:.\Generated_Source\PSoC5/PWM2.c **** {
  86:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction || PWM2_UseControl)
  87:.\Generated_Source\PSoC5/PWM2.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction || PWM2_UseControl) */
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 3


  89:.\Generated_Source\PSoC5/PWM2.c **** 
  90:.\Generated_Source\PSoC5/PWM2.c ****     #if(!PWM2_UsingFixedFunction)
  91:.\Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UseStatus)
  92:.\Generated_Source\PSoC5/PWM2.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC5/PWM2.c ****             uint8 PWM2_interruptState;
  94:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseStatus) */
  95:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (!PWM2_UsingFixedFunction) */
  96:.\Generated_Source\PSoC5/PWM2.c **** 
  97:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
  98:.\Generated_Source\PSoC5/PWM2.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL |= PWM2_CFG0_MODE;
 100:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_DeadBand2_4)
 101:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_CONTROL |= PWM2_CFG0_DB;
 102:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_DeadBand2_4) */
 103:.\Generated_Source\PSoC5/PWM2.c **** 
 104:.\Generated_Source\PSoC5/PWM2.c ****         ctrl = PWM2_CONTROL3 & ((uint8 )(~PWM2_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL3 = ctrl | PWM2_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC5/PWM2.c **** 
 107:.\Generated_Source\PSoC5/PWM2.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 &= ((uint8)(~PWM2_RT1_MASK));
 109:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 |= PWM2_SYNC;
 110:.\Generated_Source\PSoC5/PWM2.c **** 
 111:.\Generated_Source\PSoC5/PWM2.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 &= ((uint8)(~PWM2_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 |= PWM2_SYNCDSI_EN;
 114:.\Generated_Source\PSoC5/PWM2.c **** 
 115:.\Generated_Source\PSoC5/PWM2.c ****     #elif (PWM2_UseControl)
 116:.\Generated_Source\PSoC5/PWM2.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC5/PWM2.c ****         ctrl = PWM2_CONTROL & ((uint8)(~PWM2_CTRL_CMPMODE2_MASK)) &
 118:.\Generated_Source\PSoC5/PWM2.c ****                 ((uint8)(~PWM2_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL = ctrl | PWM2_DEFAULT_COMPARE2_MODE |
 120:.\Generated_Source\PSoC5/PWM2.c ****                                    PWM2_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 122:.\Generated_Source\PSoC5/PWM2.c **** 
 123:.\Generated_Source\PSoC5/PWM2.c ****     #if (!PWM2_UsingFixedFunction)
 124:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_Resolution == 8)
 125:.\Generated_Source\PSoC5/PWM2.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_AUX_CONTROLDP0 |= (PWM2_AUX_CTRL_FIFO0_CLR);
 127:.\Generated_Source\PSoC5/PWM2.c ****         #else /* (PWM2_Resolution == 16)*/
 128:.\Generated_Source\PSoC5/PWM2.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_AUX_CONTROLDP0 |= (PWM2_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_AUX_CONTROLDP1 |= (PWM2_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_Resolution == 8) */
 132:.\Generated_Source\PSoC5/PWM2.c **** 
 133:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_WriteCounter(PWM2_INIT_PERIOD_VALUE);
 134:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (!PWM2_UsingFixedFunction) */
 135:.\Generated_Source\PSoC5/PWM2.c **** 
 136:.\Generated_Source\PSoC5/PWM2.c ****     PWM2_WritePeriod(PWM2_INIT_PERIOD_VALUE);
 137:.\Generated_Source\PSoC5/PWM2.c **** 
 138:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_UseOneCompareMode)
 139:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteCompare(PWM2_INIT_COMPARE_VALUE1);
 140:.\Generated_Source\PSoC5/PWM2.c ****         #else
 141:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteCompare1(PWM2_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteCompare2(PWM2_INIT_COMPARE_VALUE2);
 143:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseOneCompareMode) */
 144:.\Generated_Source\PSoC5/PWM2.c **** 
 145:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_KillModeMinTime)
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 4


 146:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteKillTime(PWM2_MinimumKillTime);
 147:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_KillModeMinTime) */
 148:.\Generated_Source\PSoC5/PWM2.c **** 
 149:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_DeadBandUsed)
 150:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteDeadTime(PWM2_INIT_DEAD_TIME);
 151:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_DeadBandUsed) */
 152:.\Generated_Source\PSoC5/PWM2.c **** 
 153:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseStatus || PWM2_UsingFixedFunction)
 154:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_SetInterruptMode(PWM2_INIT_INTERRUPTS_MODE);
 155:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseStatus || PWM2_UsingFixedFunction) */
 156:.\Generated_Source\PSoC5/PWM2.c **** 
 157:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
 158:.\Generated_Source\PSoC5/PWM2.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_ENABLE |= PWM2_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC5/PWM2.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL2 |= PWM2_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC5/PWM2.c ****     #else
 163:.\Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UseStatus)
 164:.\Generated_Source\PSoC5/PWM2.c **** 
 165:.\Generated_Source\PSoC5/PWM2.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC5/PWM2.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_interruptState = CyEnterCriticalSection();
 168:.\Generated_Source\PSoC5/PWM2.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_STATUS_AUX_CTRL |= PWM2_STATUS_ACTL_INT_EN_MASK;
 170:.\Generated_Source\PSoC5/PWM2.c **** 
 171:.\Generated_Source\PSoC5/PWM2.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC5/PWM2.c ****             CyExitCriticalSection(PWM2_interruptState);
 173:.\Generated_Source\PSoC5/PWM2.c **** 
 174:.\Generated_Source\PSoC5/PWM2.c ****             /* Clear the FIFO to enable the PWM2_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC5/PWM2.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_ClearFIFO();
 177:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseStatus) */
 178:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 179:.\Generated_Source\PSoC5/PWM2.c **** }
 180:.\Generated_Source\PSoC5/PWM2.c **** 
 181:.\Generated_Source\PSoC5/PWM2.c **** 
 182:.\Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Enable
 184:.\Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 185:.\Generated_Source\PSoC5/PWM2.c **** *
 186:.\Generated_Source\PSoC5/PWM2.c **** * Summary:
 187:.\Generated_Source\PSoC5/PWM2.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC5/PWM2.c **** *
 189:.\Generated_Source\PSoC5/PWM2.c **** * Parameters:
 190:.\Generated_Source\PSoC5/PWM2.c **** *  None
 191:.\Generated_Source\PSoC5/PWM2.c **** *
 192:.\Generated_Source\PSoC5/PWM2.c **** * Return:
 193:.\Generated_Source\PSoC5/PWM2.c **** *  None
 194:.\Generated_Source\PSoC5/PWM2.c **** *
 195:.\Generated_Source\PSoC5/PWM2.c **** * Side Effects:
 196:.\Generated_Source\PSoC5/PWM2.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC5/PWM2.c **** *
 198:.\Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC5/PWM2.c **** void PWM2_Enable(void) 
 200:.\Generated_Source\PSoC5/PWM2.c **** {
  27              		.loc 1 200 0
  28              		.cfi_startproc
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 5


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 201:.\Generated_Source\PSoC5/PWM2.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
 203:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_ENABLE |= PWM2_BLOCK_EN_MASK;
  32              		.loc 1 203 0
  33 0000 084A     		ldr	r2, .L2
  34 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  35 0004 43F00203 		orr	r3, r3, #2
  36 0008 1370     		strb	r3, [r2]
 204:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_STBY_ENABLE |= PWM2_BLOCK_STBY_EN_MASK;
  37              		.loc 1 204 0
  38 000a 1032     		adds	r2, r2, #16
  39 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  40 000e 43F00203 		orr	r3, r3, #2
  41 0012 1370     		strb	r3, [r2]
 205:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 206:.\Generated_Source\PSoC5/PWM2.c **** 
 207:.\Generated_Source\PSoC5/PWM2.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseControl || PWM2_UsingFixedFunction)
 209:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL |= PWM2_CTRL_ENABLE;
  42              		.loc 1 209 0
  43 0014 02F65932 		addw	r2, r2, #2905
  44 0018 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  45 001a 43F00103 		orr	r3, r3, #1
  46 001e 1370     		strb	r3, [r2]
  47 0020 7047     		bx	lr
  48              	.L3:
  49 0022 00BF     		.align	2
  50              	.L2:
  51 0024 A3430040 		.word	1073759139
  52              		.cfi_endproc
  53              	.LFE2:
  54              		.size	PWM2_Enable, .-PWM2_Enable
  55              		.section	.text.PWM2_Stop,"ax",%progbits
  56              		.align	2
  57              		.global	PWM2_Stop
  58              		.thumb
  59              		.thumb_func
  60              		.type	PWM2_Stop, %function
  61              	PWM2_Stop:
  62              	.LFB3:
 210:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseControl || PWM2_UsingFixedFunction) */
 211:.\Generated_Source\PSoC5/PWM2.c **** }
 212:.\Generated_Source\PSoC5/PWM2.c **** 
 213:.\Generated_Source\PSoC5/PWM2.c **** 
 214:.\Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Stop
 216:.\Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 217:.\Generated_Source\PSoC5/PWM2.c **** *
 218:.\Generated_Source\PSoC5/PWM2.c **** * Summary:
 219:.\Generated_Source\PSoC5/PWM2.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC5/PWM2.c **** *  interrupts.
 221:.\Generated_Source\PSoC5/PWM2.c **** *
 222:.\Generated_Source\PSoC5/PWM2.c **** * Parameters:
 223:.\Generated_Source\PSoC5/PWM2.c **** *  None
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 6


 224:.\Generated_Source\PSoC5/PWM2.c **** *
 225:.\Generated_Source\PSoC5/PWM2.c **** * Return:
 226:.\Generated_Source\PSoC5/PWM2.c **** *  None
 227:.\Generated_Source\PSoC5/PWM2.c **** *
 228:.\Generated_Source\PSoC5/PWM2.c **** * Side Effects:
 229:.\Generated_Source\PSoC5/PWM2.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC5/PWM2.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC5/PWM2.c **** *
 232:.\Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC5/PWM2.c **** void PWM2_Stop(void) 
 234:.\Generated_Source\PSoC5/PWM2.c **** {
  63              		.loc 1 234 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
 235:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseControl || PWM2_UsingFixedFunction)
 236:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL &= ((uint8)(~PWM2_CTRL_ENABLE));
  68              		.loc 1 236 0
  69 0000 084A     		ldr	r2, .L5
  70 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  71 0004 03F0FE03 		and	r3, r3, #254
  72 0008 1370     		strb	r3, [r2]
 237:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseControl || PWM2_UsingFixedFunction) */
 238:.\Generated_Source\PSoC5/PWM2.c **** 
 239:.\Generated_Source\PSoC5/PWM2.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
 241:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_ENABLE &= ((uint8)(~PWM2_BLOCK_EN_MASK));
  73              		.loc 1 241 0
  74 000a A2F66932 		subw	r2, r2, #2921
  75 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  76 0010 03F0FD03 		and	r3, r3, #253
  77 0014 1370     		strb	r3, [r2]
 242:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM2_BLOCK_STBY_EN_MASK));
  78              		.loc 1 242 0
  79 0016 1032     		adds	r2, r2, #16
  80 0018 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  81 001a 03F0FD03 		and	r3, r3, #253
  82 001e 1370     		strb	r3, [r2]
  83 0020 7047     		bx	lr
  84              	.L6:
  85 0022 00BF     		.align	2
  86              	.L5:
  87 0024 0C4F0040 		.word	1073762060
  88              		.cfi_endproc
  89              	.LFE3:
  90              		.size	PWM2_Stop, .-PWM2_Stop
  91              		.section	.text.PWM2_WritePeriod,"ax",%progbits
  92              		.align	2
  93              		.global	PWM2_WritePeriod
  94              		.thumb
  95              		.thumb_func
  96              		.type	PWM2_WritePeriod, %function
  97              	PWM2_WritePeriod:
  98              	.LFB4:
 243:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 244:.\Generated_Source\PSoC5/PWM2.c **** }
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 7


 245:.\Generated_Source\PSoC5/PWM2.c **** 
 246:.\Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseOneCompareMode)
 247:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_CompareMode1SW)
 248:.\Generated_Source\PSoC5/PWM2.c **** 
 249:.\Generated_Source\PSoC5/PWM2.c **** 
 250:.\Generated_Source\PSoC5/PWM2.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC5/PWM2.c ****         * Function Name: PWM2_SetCompareMode
 252:.\Generated_Source\PSoC5/PWM2.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC5/PWM2.c ****         *
 254:.\Generated_Source\PSoC5/PWM2.c ****         * Summary:
 255:.\Generated_Source\PSoC5/PWM2.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC5/PWM2.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC5/PWM2.c ****         *
 258:.\Generated_Source\PSoC5/PWM2.c ****         * Parameters:
 259:.\Generated_Source\PSoC5/PWM2.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC5/PWM2.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC5/PWM2.c ****         *
 262:.\Generated_Source\PSoC5/PWM2.c ****         * Return:
 263:.\Generated_Source\PSoC5/PWM2.c ****         *  None
 264:.\Generated_Source\PSoC5/PWM2.c ****         *
 265:.\Generated_Source\PSoC5/PWM2.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC5/PWM2.c ****         void PWM2_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC5/PWM2.c ****         {
 268:.\Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_UsingFixedFunction)
 269:.\Generated_Source\PSoC5/PWM2.c **** 
 270:.\Generated_Source\PSoC5/PWM2.c ****                 #if(0 != PWM2_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE1_SHI
 272:.\Generated_Source\PSoC5/PWM2.c ****                 #else
 273:.\Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC5/PWM2.c ****                 #endif /* (0 != PWM2_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC5/PWM2.c **** 
 276:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL3 &= ((uint8)(~PWM2_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC5/PWM2.c **** 
 279:.\Generated_Source\PSoC5/PWM2.c ****             #elif (PWM2_UseControl)
 280:.\Generated_Source\PSoC5/PWM2.c **** 
 281:.\Generated_Source\PSoC5/PWM2.c ****                 #if(0 != PWM2_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE1_SH
 283:.\Generated_Source\PSoC5/PWM2.c ****                                                 PWM2_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC5/PWM2.c ****                 #else
 285:.\Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode1masked = comparemode & PWM2_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC5/PWM2.c ****                 #endif /* (0 != PWM2_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC5/PWM2.c **** 
 288:.\Generated_Source\PSoC5/PWM2.c ****                 #if(0 != PWM2_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE2_SH
 290:.\Generated_Source\PSoC5/PWM2.c ****                                                PWM2_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC5/PWM2.c ****                 #else
 292:.\Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode2masked = comparemode & PWM2_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC5/PWM2.c ****                 #endif /* (0 != PWM2_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC5/PWM2.c **** 
 295:.\Generated_Source\PSoC5/PWM2.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL &= ((uint8)(~(PWM2_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC5/PWM2.c ****                                             PWM2_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC5/PWM2.c **** 
 300:.\Generated_Source\PSoC5/PWM2.c ****             #else
 301:.\Generated_Source\PSoC5/PWM2.c ****                 uint8 temp = comparemode;
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 8


 302:.\Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_UsingFixedFunction) */
 303:.\Generated_Source\PSoC5/PWM2.c ****         }
 304:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* PWM2_CompareMode1SW */
 305:.\Generated_Source\PSoC5/PWM2.c **** 
 306:.\Generated_Source\PSoC5/PWM2.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC5/PWM2.c **** 
 308:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_CompareMode1SW)
 309:.\Generated_Source\PSoC5/PWM2.c **** 
 310:.\Generated_Source\PSoC5/PWM2.c **** 
 311:.\Generated_Source\PSoC5/PWM2.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC5/PWM2.c ****         * Function Name: PWM2_SetCompareMode1
 313:.\Generated_Source\PSoC5/PWM2.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC5/PWM2.c ****         *
 315:.\Generated_Source\PSoC5/PWM2.c ****         * Summary:
 316:.\Generated_Source\PSoC5/PWM2.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC5/PWM2.c ****         *
 318:.\Generated_Source\PSoC5/PWM2.c ****         * Parameters:
 319:.\Generated_Source\PSoC5/PWM2.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC5/PWM2.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC5/PWM2.c ****         *
 322:.\Generated_Source\PSoC5/PWM2.c ****         * Return:
 323:.\Generated_Source\PSoC5/PWM2.c ****         *  None
 324:.\Generated_Source\PSoC5/PWM2.c ****         *
 325:.\Generated_Source\PSoC5/PWM2.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC5/PWM2.c ****         void PWM2_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC5/PWM2.c ****         {
 328:.\Generated_Source\PSoC5/PWM2.c ****             #if(0 != PWM2_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC5/PWM2.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE1_SHIFT))
 330:.\Generated_Source\PSoC5/PWM2.c ****                                            PWM2_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC5/PWM2.c ****             #else
 332:.\Generated_Source\PSoC5/PWM2.c ****                 uint8 comparemodemasked = comparemode & PWM2_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC5/PWM2.c ****             #endif /* (0 != PWM2_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC5/PWM2.c **** 
 335:.\Generated_Source\PSoC5/PWM2.c ****             #if (PWM2_UseControl)
 336:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL &= ((uint8)(~PWM2_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_UseControl) */
 339:.\Generated_Source\PSoC5/PWM2.c ****         }
 340:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* PWM2_CompareMode1SW */
 341:.\Generated_Source\PSoC5/PWM2.c **** 
 342:.\Generated_Source\PSoC5/PWM2.c **** #if (PWM2_CompareMode2SW)
 343:.\Generated_Source\PSoC5/PWM2.c **** 
 344:.\Generated_Source\PSoC5/PWM2.c **** 
 345:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_SetCompareMode2
 347:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC5/PWM2.c ****     *
 349:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 350:.\Generated_Source\PSoC5/PWM2.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC5/PWM2.c ****     *
 352:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 353:.\Generated_Source\PSoC5/PWM2.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC5/PWM2.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC5/PWM2.c ****     *
 356:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 357:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 358:.\Generated_Source\PSoC5/PWM2.c ****     *
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 9


 359:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC5/PWM2.c ****     {
 362:.\Generated_Source\PSoC5/PWM2.c **** 
 363:.\Generated_Source\PSoC5/PWM2.c ****         #if(0 != PWM2_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC5/PWM2.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE2_SHIFT)) &
 365:.\Generated_Source\PSoC5/PWM2.c ****                                                  PWM2_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC5/PWM2.c ****         #else
 367:.\Generated_Source\PSoC5/PWM2.c ****             uint8 comparemodemasked = comparemode & PWM2_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (0 != PWM2_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC5/PWM2.c **** 
 370:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_UseControl)
 371:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_CONTROL &= ((uint8)(~PWM2_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseControl) */
 374:.\Generated_Source\PSoC5/PWM2.c ****     }
 375:.\Generated_Source\PSoC5/PWM2.c ****     #endif /*PWM2_CompareMode2SW */
 376:.\Generated_Source\PSoC5/PWM2.c **** 
 377:.\Generated_Source\PSoC5/PWM2.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC5/PWM2.c **** 
 379:.\Generated_Source\PSoC5/PWM2.c **** 
 380:.\Generated_Source\PSoC5/PWM2.c **** #if (!PWM2_UsingFixedFunction)
 381:.\Generated_Source\PSoC5/PWM2.c **** 
 382:.\Generated_Source\PSoC5/PWM2.c **** 
 383:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCounter
 385:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC5/PWM2.c ****     *
 387:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 388:.\Generated_Source\PSoC5/PWM2.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC5/PWM2.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC5/PWM2.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC5/PWM2.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC5/PWM2.c ****     *
 393:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 394:.\Generated_Source\PSoC5/PWM2.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC5/PWM2.c ****     *
 396:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 397:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 398:.\Generated_Source\PSoC5/PWM2.c ****     *
 399:.\Generated_Source\PSoC5/PWM2.c ****     * Side Effects:
 400:.\Generated_Source\PSoC5/PWM2.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC5/PWM2.c ****     *
 402:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCounter(uint16 counter) \
 404:.\Generated_Source\PSoC5/PWM2.c ****                                        
 405:.\Generated_Source\PSoC5/PWM2.c ****     {
 406:.\Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG16(PWM2_COUNTER_LSB_PTR, counter);
 407:.\Generated_Source\PSoC5/PWM2.c ****     }
 408:.\Generated_Source\PSoC5/PWM2.c **** 
 409:.\Generated_Source\PSoC5/PWM2.c **** 
 410:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 411:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCounter
 412:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC5/PWM2.c ****     *
 414:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 415:.\Generated_Source\PSoC5/PWM2.c ****     *  This function returns the current value of the counter.  It doesn't matter
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 10


 416:.\Generated_Source\PSoC5/PWM2.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC5/PWM2.c ****     *
 418:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 419:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 420:.\Generated_Source\PSoC5/PWM2.c ****     *
 421:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 422:.\Generated_Source\PSoC5/PWM2.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC5/PWM2.c ****     *
 424:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCounter(void) 
 426:.\Generated_Source\PSoC5/PWM2.c ****     {
 427:.\Generated_Source\PSoC5/PWM2.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC5/PWM2.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC5/PWM2.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC5/PWM2.c ****           (void)CY_GET_REG8(PWM2_COUNTERCAP_LSB_PTR_8BIT);
 431:.\Generated_Source\PSoC5/PWM2.c **** 
 432:.\Generated_Source\PSoC5/PWM2.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_CAPTURE_LSB_PTR));
 434:.\Generated_Source\PSoC5/PWM2.c ****     }
 435:.\Generated_Source\PSoC5/PWM2.c **** 
 436:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseStatus)
 437:.\Generated_Source\PSoC5/PWM2.c **** 
 438:.\Generated_Source\PSoC5/PWM2.c **** 
 439:.\Generated_Source\PSoC5/PWM2.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC5/PWM2.c ****         * Function Name: PWM2_ClearFIFO
 441:.\Generated_Source\PSoC5/PWM2.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC5/PWM2.c ****         *
 443:.\Generated_Source\PSoC5/PWM2.c ****         * Summary:
 444:.\Generated_Source\PSoC5/PWM2.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC5/PWM2.c ****         *
 446:.\Generated_Source\PSoC5/PWM2.c ****         * Parameters:
 447:.\Generated_Source\PSoC5/PWM2.c ****         *  None
 448:.\Generated_Source\PSoC5/PWM2.c ****         *
 449:.\Generated_Source\PSoC5/PWM2.c ****         * Return:
 450:.\Generated_Source\PSoC5/PWM2.c ****         *  None
 451:.\Generated_Source\PSoC5/PWM2.c ****         *
 452:.\Generated_Source\PSoC5/PWM2.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC5/PWM2.c ****         void PWM2_ClearFIFO(void) 
 454:.\Generated_Source\PSoC5/PWM2.c ****         {
 455:.\Generated_Source\PSoC5/PWM2.c ****             while(0u != (PWM2_ReadStatusRegister() & PWM2_STATUS_FIFONEMPTY))
 456:.\Generated_Source\PSoC5/PWM2.c ****             {
 457:.\Generated_Source\PSoC5/PWM2.c ****                 (void)PWM2_ReadCapture();
 458:.\Generated_Source\PSoC5/PWM2.c ****             }
 459:.\Generated_Source\PSoC5/PWM2.c ****         }
 460:.\Generated_Source\PSoC5/PWM2.c **** 
 461:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* PWM2_UseStatus */
 462:.\Generated_Source\PSoC5/PWM2.c **** 
 463:.\Generated_Source\PSoC5/PWM2.c **** #endif /* !PWM2_UsingFixedFunction */
 464:.\Generated_Source\PSoC5/PWM2.c **** 
 465:.\Generated_Source\PSoC5/PWM2.c **** 
 466:.\Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_WritePeriod
 468:.\Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 469:.\Generated_Source\PSoC5/PWM2.c **** *
 470:.\Generated_Source\PSoC5/PWM2.c **** * Summary:
 471:.\Generated_Source\PSoC5/PWM2.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC5/PWM2.c **** *  will be loaded the next time terminal count is detected.
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 11


 473:.\Generated_Source\PSoC5/PWM2.c **** *
 474:.\Generated_Source\PSoC5/PWM2.c **** * Parameters:
 475:.\Generated_Source\PSoC5/PWM2.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC5/PWM2.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC5/PWM2.c **** *
 478:.\Generated_Source\PSoC5/PWM2.c **** * Return:
 479:.\Generated_Source\PSoC5/PWM2.c **** *  None
 480:.\Generated_Source\PSoC5/PWM2.c **** *
 481:.\Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC5/PWM2.c **** void PWM2_WritePeriod(uint16 period) 
 483:.\Generated_Source\PSoC5/PWM2.c **** {
  99              		.loc 1 483 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL0:
 484:.\Generated_Source\PSoC5/PWM2.c ****     #if(PWM2_UsingFixedFunction)
 485:.\Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG16(PWM2_PERIOD_LSB_PTR, (uint16)period);
 105              		.loc 1 485 0
 106 0000 014B     		ldr	r3, .L8
 107 0002 1880     		strh	r0, [r3]	@ movhi
 108 0004 7047     		bx	lr
 109              	.L9:
 110 0006 00BF     		.align	2
 111              	.L8:
 112 0008 104F0040 		.word	1073762064
 113              		.cfi_endproc
 114              	.LFE4:
 115              		.size	PWM2_WritePeriod, .-PWM2_WritePeriod
 116              		.section	.text.PWM2_WriteCompare,"ax",%progbits
 117              		.align	2
 118              		.global	PWM2_WriteCompare
 119              		.thumb
 120              		.thumb_func
 121              		.type	PWM2_WriteCompare, %function
 122              	PWM2_WriteCompare:
 123              	.LFB5:
 486:.\Generated_Source\PSoC5/PWM2.c ****     #else
 487:.\Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG16(PWM2_PERIOD_LSB_PTR, period);
 488:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 489:.\Generated_Source\PSoC5/PWM2.c **** }
 490:.\Generated_Source\PSoC5/PWM2.c **** 
 491:.\Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseOneCompareMode)
 492:.\Generated_Source\PSoC5/PWM2.c **** 
 493:.\Generated_Source\PSoC5/PWM2.c **** 
 494:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCompare
 496:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC5/PWM2.c ****     *
 498:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 499:.\Generated_Source\PSoC5/PWM2.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC5/PWM2.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC5/PWM2.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC5/PWM2.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC5/PWM2.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC5/PWM2.c ****     *
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 12


 505:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 506:.\Generated_Source\PSoC5/PWM2.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC5/PWM2.c ****     *
 508:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 509:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 510:.\Generated_Source\PSoC5/PWM2.c ****     *
 511:.\Generated_Source\PSoC5/PWM2.c ****     * Side Effects:
 512:.\Generated_Source\PSoC5/PWM2.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC5/PWM2.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC5/PWM2.c ****     *
 515:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCompare(uint16 compare) \
 517:.\Generated_Source\PSoC5/PWM2.c ****                                        
 518:.\Generated_Source\PSoC5/PWM2.c ****     {
 124              		.loc 1 518 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.LVL1:
 519:.\Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 520:.\Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, (uint16)compare);
 130              		.loc 1 520 0
 131 0000 014B     		ldr	r3, .L11
 132 0002 1880     		strh	r0, [r3]	@ movhi
 133 0004 7047     		bx	lr
 134              	.L12:
 135 0006 00BF     		.align	2
 136              	.L11:
 137 0008 124F0040 		.word	1073762066
 138              		.cfi_endproc
 139              	.LFE5:
 140              		.size	PWM2_WriteCompare, .-PWM2_WriteCompare
 141              		.section	.text.PWM2_SetInterruptMode,"ax",%progbits
 142              		.align	2
 143              		.global	PWM2_SetInterruptMode
 144              		.thumb
 145              		.thumb_func
 146              		.type	PWM2_SetInterruptMode, %function
 147              	PWM2_SetInterruptMode:
 148              	.LFB6:
 521:.\Generated_Source\PSoC5/PWM2.c ****         #else
 522:.\Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, compare);
 523:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 524:.\Generated_Source\PSoC5/PWM2.c **** 
 525:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_PWMMode == PWM2__B_PWM__DITHER)
 526:.\Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_UsingFixedFunction)
 527:.\Generated_Source\PSoC5/PWM2.c ****                 CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC5/PWM2.c ****             #else
 529:.\Generated_Source\PSoC5/PWM2.c ****                 CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_UsingFixedFunction) */
 531:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_PWMMode == PWM2__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC5/PWM2.c ****     }
 533:.\Generated_Source\PSoC5/PWM2.c **** 
 534:.\Generated_Source\PSoC5/PWM2.c **** 
 535:.\Generated_Source\PSoC5/PWM2.c **** #else
 536:.\Generated_Source\PSoC5/PWM2.c **** 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 13


 537:.\Generated_Source\PSoC5/PWM2.c **** 
 538:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCompare1
 540:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC5/PWM2.c ****     *
 542:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 543:.\Generated_Source\PSoC5/PWM2.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC5/PWM2.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC5/PWM2.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC5/PWM2.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC5/PWM2.c ****     *
 548:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 549:.\Generated_Source\PSoC5/PWM2.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC5/PWM2.c ****     *
 551:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 552:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 553:.\Generated_Source\PSoC5/PWM2.c ****     *
 554:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCompare1(uint16 compare) \
 556:.\Generated_Source\PSoC5/PWM2.c ****                                         
 557:.\Generated_Source\PSoC5/PWM2.c ****     {
 558:.\Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 559:.\Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC5/PWM2.c ****         #else
 561:.\Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, compare);
 562:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 563:.\Generated_Source\PSoC5/PWM2.c ****     }
 564:.\Generated_Source\PSoC5/PWM2.c **** 
 565:.\Generated_Source\PSoC5/PWM2.c **** 
 566:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCompare2
 568:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC5/PWM2.c ****     *
 570:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 571:.\Generated_Source\PSoC5/PWM2.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC5/PWM2.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC5/PWM2.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC5/PWM2.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC5/PWM2.c ****     *  mode.
 576:.\Generated_Source\PSoC5/PWM2.c ****     *
 577:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 578:.\Generated_Source\PSoC5/PWM2.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC5/PWM2.c ****     *
 580:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 581:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 582:.\Generated_Source\PSoC5/PWM2.c ****     *
 583:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCompare2(uint16 compare) \
 585:.\Generated_Source\PSoC5/PWM2.c ****                                         
 586:.\Generated_Source\PSoC5/PWM2.c ****     {
 587:.\Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 588:.\Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC5/PWM2.c ****         #else
 590:.\Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, compare);
 591:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 592:.\Generated_Source\PSoC5/PWM2.c ****     }
 593:.\Generated_Source\PSoC5/PWM2.c **** #endif /* UseOneCompareMode */
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 14


 594:.\Generated_Source\PSoC5/PWM2.c **** 
 595:.\Generated_Source\PSoC5/PWM2.c **** #if (PWM2_DeadBandUsed)
 596:.\Generated_Source\PSoC5/PWM2.c **** 
 597:.\Generated_Source\PSoC5/PWM2.c **** 
 598:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteDeadTime
 600:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC5/PWM2.c ****     *
 602:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 603:.\Generated_Source\PSoC5/PWM2.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC5/PWM2.c ****     *
 605:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 606:.\Generated_Source\PSoC5/PWM2.c ****     *  deadtime:  Number of counts for dead time
 607:.\Generated_Source\PSoC5/PWM2.c ****     *
 608:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 609:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 610:.\Generated_Source\PSoC5/PWM2.c ****     *
 611:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC5/PWM2.c ****     {
 614:.\Generated_Source\PSoC5/PWM2.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC5/PWM2.c ****         #if(!PWM2_DeadBand2_4)
 616:.\Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG8(PWM2_DEADBAND_COUNT_PTR, deadtime);
 617:.\Generated_Source\PSoC5/PWM2.c ****         #else
 618:.\Generated_Source\PSoC5/PWM2.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC5/PWM2.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC5/PWM2.c ****             PWM2_DEADBAND_COUNT &= ((uint8)(~PWM2_DEADBAND_COUNT_MASK));
 621:.\Generated_Source\PSoC5/PWM2.c **** 
 622:.\Generated_Source\PSoC5/PWM2.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM2_DEADBAND_COUNT_SHIFT)) &
 625:.\Generated_Source\PSoC5/PWM2.c ****                                                     PWM2_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC5/PWM2.c ****             #else
 627:.\Generated_Source\PSoC5/PWM2.c ****                 PWM2_DEADBAND_COUNT |= deadtime & PWM2_DEADBAND_COUNT_MASK;
 628:.\Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC5/PWM2.c **** 
 630:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (!PWM2_DeadBand2_4) */
 631:.\Generated_Source\PSoC5/PWM2.c ****     }
 632:.\Generated_Source\PSoC5/PWM2.c **** 
 633:.\Generated_Source\PSoC5/PWM2.c **** 
 634:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadDeadTime
 636:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC5/PWM2.c ****     *
 638:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 639:.\Generated_Source\PSoC5/PWM2.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC5/PWM2.c ****     *
 641:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 642:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 643:.\Generated_Source\PSoC5/PWM2.c ****     *
 644:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 645:.\Generated_Source\PSoC5/PWM2.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC5/PWM2.c ****     *
 647:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC5/PWM2.c ****     uint8 PWM2_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC5/PWM2.c ****     {
 650:.\Generated_Source\PSoC5/PWM2.c ****         /* If using the Dead Band 1-255 mode then just read the register */
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 15


 651:.\Generated_Source\PSoC5/PWM2.c ****         #if(!PWM2_DeadBand2_4)
 652:.\Generated_Source\PSoC5/PWM2.c ****             return (CY_GET_REG8(PWM2_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC5/PWM2.c ****         #else
 654:.\Generated_Source\PSoC5/PWM2.c **** 
 655:.\Generated_Source\PSoC5/PWM2.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC5/PWM2.c ****                 return ((uint8)(((uint8)(PWM2_DEADBAND_COUNT & PWM2_DEADBAND_COUNT_MASK)) >>
 658:.\Generated_Source\PSoC5/PWM2.c ****                                                                            PWM2_DEADBAND_COUNT_SHIF
 659:.\Generated_Source\PSoC5/PWM2.c ****             #else
 660:.\Generated_Source\PSoC5/PWM2.c ****                 return (PWM2_DEADBAND_COUNT & PWM2_DEADBAND_COUNT_MASK);
 661:.\Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (!PWM2_DeadBand2_4) */
 663:.\Generated_Source\PSoC5/PWM2.c ****     }
 664:.\Generated_Source\PSoC5/PWM2.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC5/PWM2.c **** 
 666:.\Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseStatus || PWM2_UsingFixedFunction)
 667:.\Generated_Source\PSoC5/PWM2.c **** 
 668:.\Generated_Source\PSoC5/PWM2.c **** 
 669:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_SetInterruptMode
 671:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC5/PWM2.c ****     *
 673:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 674:.\Generated_Source\PSoC5/PWM2.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC5/PWM2.c ****     *  source status register.
 676:.\Generated_Source\PSoC5/PWM2.c ****     *
 677:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 678:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC5/PWM2.c ****     *
 680:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 681:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 682:.\Generated_Source\PSoC5/PWM2.c ****     *
 683:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC5/PWM2.c ****     {
 149              		.loc 1 685 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL2:
 686:.\Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG8(PWM2_STATUS_MASK_PTR, interruptMode);
 155              		.loc 1 686 0
 156 0000 014B     		ldr	r3, .L14
 157 0002 1870     		strb	r0, [r3]
 158 0004 7047     		bx	lr
 159              	.L15:
 160 0006 00BF     		.align	2
 161              	.L14:
 162 0008 0F4F0040 		.word	1073762063
 163              		.cfi_endproc
 164              	.LFE6:
 165              		.size	PWM2_SetInterruptMode, .-PWM2_SetInterruptMode
 166              		.section	.text.PWM2_Init,"ax",%progbits
 167              		.align	2
 168              		.global	PWM2_Init
 169              		.thumb
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 16


 170              		.thumb_func
 171              		.type	PWM2_Init, %function
 172              	PWM2_Init:
 173              	.LFB1:
  85:.\Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction || PWM2_UseControl)
 174              		.loc 1 85 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178 0000 08B5     		push	{r3, lr}
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 3, -8
 181              		.cfi_offset 14, -4
  99:.\Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_DeadBand2_4)
 182              		.loc 1 99 0
 183 0002 1A4A     		ldr	r2, .L18
 184 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 185 0006 43F00203 		orr	r3, r3, #2
 186 000a 1370     		strb	r3, [r2]
 104:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL3 = ctrl | PWM2_DEFAULT_COMPARE1_MODE;
 187              		.loc 1 104 0
 188 000c 0232     		adds	r2, r2, #2
 189 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 190 0010 03F08F03 		and	r3, r3, #143
 191              	.LVL3:
 105:.\Generated_Source\PSoC5/PWM2.c **** 
 192              		.loc 1 105 0
 193 0014 43F01003 		orr	r3, r3, #16
 194              	.LVL4:
 195 0018 1370     		strb	r3, [r2]
 108:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 |= PWM2_SYNC;
 196              		.loc 1 108 0
 197 001a 154B     		ldr	r3, .L18+4
 198 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 199 001e 02F0CF02 		and	r2, r2, #207
 200 0022 1A70     		strb	r2, [r3]
 109:.\Generated_Source\PSoC5/PWM2.c **** 
 201              		.loc 1 109 0
 202 0024 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 203 0026 42F03002 		orr	r2, r2, #48
 204 002a 1A70     		strb	r2, [r3]
 112:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 |= PWM2_SYNCDSI_EN;
 205              		.loc 1 112 0
 206 002c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 207 002e 02F0F002 		and	r2, r2, #240
 208 0032 1A70     		strb	r2, [r3]
 113:.\Generated_Source\PSoC5/PWM2.c **** 
 209              		.loc 1 113 0
 210 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 211 0036 42F00F02 		orr	r2, r2, #15
 212 003a 1A70     		strb	r2, [r3]
 136:.\Generated_Source\PSoC5/PWM2.c **** 
 213              		.loc 1 136 0
 214 003c 4FF47A70 		mov	r0, #1000
 215 0040 FFF7FEFF 		bl	PWM2_WritePeriod
 216              	.LVL5:
 139:.\Generated_Source\PSoC5/PWM2.c ****         #else
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 17


 217              		.loc 1 139 0
 218 0044 4FF4FA70 		mov	r0, #500
 219 0048 FFF7FEFF 		bl	PWM2_WriteCompare
 220              	.LVL6:
 154:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseStatus || PWM2_UsingFixedFunction) */
 221              		.loc 1 154 0
 222 004c 0020     		movs	r0, #0
 223 004e FFF7FEFF 		bl	PWM2_SetInterruptMode
 224              	.LVL7:
 159:.\Generated_Source\PSoC5/PWM2.c ****         /* Set the Interrupt source to come from the status register */
 225              		.loc 1 159 0
 226 0052 084A     		ldr	r2, .L18+8
 227 0054 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 228 0056 43F00203 		orr	r3, r3, #2
 229 005a 1370     		strb	r3, [r2]
 161:.\Generated_Source\PSoC5/PWM2.c ****     #else
 230              		.loc 1 161 0
 231 005c 02F66A32 		addw	r2, r2, #2922
 232 0060 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 233 0062 43F00103 		orr	r3, r3, #1
 234 0066 1370     		strb	r3, [r2]
 235 0068 08BD     		pop	{r3, pc}
 236              	.L19:
 237 006a 00BF     		.align	2
 238              	.L18:
 239 006c 0C4F0040 		.word	1073762060
 240 0070 174F0040 		.word	1073762071
 241 0074 A3430040 		.word	1073759139
 242              		.cfi_endproc
 243              	.LFE1:
 244              		.size	PWM2_Init, .-PWM2_Init
 245              		.section	.text.PWM2_Start,"ax",%progbits
 246              		.align	2
 247              		.global	PWM2_Start
 248              		.thumb
 249              		.thumb_func
 250              		.type	PWM2_Start, %function
 251              	PWM2_Start:
 252              	.LFB0:
  56:.\Generated_Source\PSoC5/PWM2.c ****     /* If not Initialized then initialize all required hardware and software */
 253              		.loc 1 56 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257 0000 08B5     		push	{r3, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 3, -8
 260              		.cfi_offset 14, -4
  58:.\Generated_Source\PSoC5/PWM2.c ****     {
 261              		.loc 1 58 0
 262 0002 054B     		ldr	r3, .L23
 263 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 264 0006 23B9     		cbnz	r3, .L21
  60:.\Generated_Source\PSoC5/PWM2.c ****         PWM2_initVar = 1u;
 265              		.loc 1 60 0
 266 0008 FFF7FEFF 		bl	PWM2_Init
 267              	.LVL8:
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 18


  61:.\Generated_Source\PSoC5/PWM2.c ****     }
 268              		.loc 1 61 0
 269 000c 0122     		movs	r2, #1
 270 000e 024B     		ldr	r3, .L23
 271 0010 1A70     		strb	r2, [r3]
 272              	.L21:
  63:.\Generated_Source\PSoC5/PWM2.c **** 
 273              		.loc 1 63 0
 274 0012 FFF7FEFF 		bl	PWM2_Enable
 275              	.LVL9:
 276 0016 08BD     		pop	{r3, pc}
 277              	.L24:
 278              		.align	2
 279              	.L23:
 280 0018 00000000 		.word	.LANCHOR0
 281              		.cfi_endproc
 282              	.LFE0:
 283              		.size	PWM2_Start, .-PWM2_Start
 284              		.section	.text.PWM2_ReadStatusRegister,"ax",%progbits
 285              		.align	2
 286              		.global	PWM2_ReadStatusRegister
 287              		.thumb
 288              		.thumb_func
 289              		.type	PWM2_ReadStatusRegister, %function
 290              	PWM2_ReadStatusRegister:
 291              	.LFB7:
 687:.\Generated_Source\PSoC5/PWM2.c ****     }
 688:.\Generated_Source\PSoC5/PWM2.c **** 
 689:.\Generated_Source\PSoC5/PWM2.c **** 
 690:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadStatusRegister
 692:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC5/PWM2.c ****     *
 694:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 695:.\Generated_Source\PSoC5/PWM2.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC5/PWM2.c ****     *
 697:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 698:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 699:.\Generated_Source\PSoC5/PWM2.c ****     *
 700:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 701:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC5/PWM2.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC5/PWM2.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC5/PWM2.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC5/PWM2.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC5/PWM2.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC5/PWM2.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC5/PWM2.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC5/PWM2.c ****     *
 710:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC5/PWM2.c ****     uint8 PWM2_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC5/PWM2.c ****     {
 292              		.loc 1 712 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 19


 713:.\Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG8(PWM2_STATUS_PTR));
 297              		.loc 1 713 0
 298 0000 014B     		ldr	r3, .L26
 299 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:.\Generated_Source\PSoC5/PWM2.c ****     }
 300              		.loc 1 714 0
 301 0004 7047     		bx	lr
 302              	.L27:
 303 0006 00BF     		.align	2
 304              	.L26:
 305 0008 0F4F0040 		.word	1073762063
 306              		.cfi_endproc
 307              	.LFE7:
 308              		.size	PWM2_ReadStatusRegister, .-PWM2_ReadStatusRegister
 309              		.section	.text.PWM2_ReadControlRegister,"ax",%progbits
 310              		.align	2
 311              		.global	PWM2_ReadControlRegister
 312              		.thumb
 313              		.thumb_func
 314              		.type	PWM2_ReadControlRegister, %function
 315              	PWM2_ReadControlRegister:
 316              	.LFB8:
 715:.\Generated_Source\PSoC5/PWM2.c **** 
 716:.\Generated_Source\PSoC5/PWM2.c **** #endif /* (PWM2_UseStatus || PWM2_UsingFixedFunction) */
 717:.\Generated_Source\PSoC5/PWM2.c **** 
 718:.\Generated_Source\PSoC5/PWM2.c **** 
 719:.\Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseControl)
 720:.\Generated_Source\PSoC5/PWM2.c **** 
 721:.\Generated_Source\PSoC5/PWM2.c **** 
 722:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadControlRegister
 724:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC5/PWM2.c ****     *
 726:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 727:.\Generated_Source\PSoC5/PWM2.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC5/PWM2.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC5/PWM2.c ****     *
 730:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 731:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 732:.\Generated_Source\PSoC5/PWM2.c ****     *
 733:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 734:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC5/PWM2.c ****     *
 736:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC5/PWM2.c ****     uint8 PWM2_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC5/PWM2.c ****     {
 317              		.loc 1 738 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              		@ link register save eliminated.
 739:.\Generated_Source\PSoC5/PWM2.c ****         uint8 result;
 740:.\Generated_Source\PSoC5/PWM2.c **** 
 741:.\Generated_Source\PSoC5/PWM2.c ****         result = CY_GET_REG8(PWM2_CONTROL_PTR);
 322              		.loc 1 741 0
 323 0000 014B     		ldr	r3, .L29
 324 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 20


 325              	.LVL10:
 742:.\Generated_Source\PSoC5/PWM2.c ****         return (result);
 743:.\Generated_Source\PSoC5/PWM2.c ****     }
 326              		.loc 1 743 0
 327 0004 7047     		bx	lr
 328              	.L30:
 329 0006 00BF     		.align	2
 330              	.L29:
 331 0008 0C4F0040 		.word	1073762060
 332              		.cfi_endproc
 333              	.LFE8:
 334              		.size	PWM2_ReadControlRegister, .-PWM2_ReadControlRegister
 335              		.section	.text.PWM2_WriteControlRegister,"ax",%progbits
 336              		.align	2
 337              		.global	PWM2_WriteControlRegister
 338              		.thumb
 339              		.thumb_func
 340              		.type	PWM2_WriteControlRegister, %function
 341              	PWM2_WriteControlRegister:
 342              	.LFB9:
 744:.\Generated_Source\PSoC5/PWM2.c **** 
 745:.\Generated_Source\PSoC5/PWM2.c **** 
 746:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteControlRegister
 748:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC5/PWM2.c ****     *
 750:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 751:.\Generated_Source\PSoC5/PWM2.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC5/PWM2.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC5/PWM2.c ****     *
 754:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 755:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC5/PWM2.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC5/PWM2.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC5/PWM2.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC5/PWM2.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC5/PWM2.c ****     *
 761:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 762:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 763:.\Generated_Source\PSoC5/PWM2.c ****     *
 764:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC5/PWM2.c ****     {
 343              		.loc 1 766 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348              	.LVL11:
 767:.\Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG8(PWM2_CONTROL_PTR, control);
 349              		.loc 1 767 0
 350 0000 014B     		ldr	r3, .L32
 351 0002 1870     		strb	r0, [r3]
 352 0004 7047     		bx	lr
 353              	.L33:
 354 0006 00BF     		.align	2
 355              	.L32:
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 21


 356 0008 0C4F0040 		.word	1073762060
 357              		.cfi_endproc
 358              	.LFE9:
 359              		.size	PWM2_WriteControlRegister, .-PWM2_WriteControlRegister
 360              		.section	.text.PWM2_ReadCompare,"ax",%progbits
 361              		.align	2
 362              		.global	PWM2_ReadCompare
 363              		.thumb
 364              		.thumb_func
 365              		.type	PWM2_ReadCompare, %function
 366              	PWM2_ReadCompare:
 367              	.LFB10:
 768:.\Generated_Source\PSoC5/PWM2.c ****     }
 769:.\Generated_Source\PSoC5/PWM2.c **** 
 770:.\Generated_Source\PSoC5/PWM2.c **** #endif /* (PWM2_UseControl) */
 771:.\Generated_Source\PSoC5/PWM2.c **** 
 772:.\Generated_Source\PSoC5/PWM2.c **** 
 773:.\Generated_Source\PSoC5/PWM2.c **** #if (!PWM2_UsingFixedFunction)
 774:.\Generated_Source\PSoC5/PWM2.c **** 
 775:.\Generated_Source\PSoC5/PWM2.c **** 
 776:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCapture
 778:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC5/PWM2.c ****     *
 780:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 781:.\Generated_Source\PSoC5/PWM2.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC5/PWM2.c ****     *
 783:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 784:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 785:.\Generated_Source\PSoC5/PWM2.c ****     *
 786:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 787:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC5/PWM2.c ****     *
 789:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCapture(void) 
 791:.\Generated_Source\PSoC5/PWM2.c ****     {
 792:.\Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_CAPTURE_LSB_PTR));
 793:.\Generated_Source\PSoC5/PWM2.c ****     }
 794:.\Generated_Source\PSoC5/PWM2.c **** 
 795:.\Generated_Source\PSoC5/PWM2.c **** #endif /* (!PWM2_UsingFixedFunction) */
 796:.\Generated_Source\PSoC5/PWM2.c **** 
 797:.\Generated_Source\PSoC5/PWM2.c **** 
 798:.\Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseOneCompareMode)
 799:.\Generated_Source\PSoC5/PWM2.c **** 
 800:.\Generated_Source\PSoC5/PWM2.c **** 
 801:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCompare
 803:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 804:.\Generated_Source\PSoC5/PWM2.c ****     *
 805:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 806:.\Generated_Source\PSoC5/PWM2.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC5/PWM2.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC5/PWM2.c ****     *
 809:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 810:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 811:.\Generated_Source\PSoC5/PWM2.c ****     *
 812:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 22


 813:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC5/PWM2.c ****     *
 815:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCompare(void) 
 817:.\Generated_Source\PSoC5/PWM2.c ****     {
 368              		.loc 1 817 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 818:.\Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 819:.\Generated_Source\PSoC5/PWM2.c ****             return ((uint16)CY_GET_REG16(PWM2_COMPARE1_LSB_PTR));
 373              		.loc 1 819 0
 374 0000 014B     		ldr	r3, .L35
 375 0002 1888     		ldrh	r0, [r3]
 820:.\Generated_Source\PSoC5/PWM2.c ****         #else
 821:.\Generated_Source\PSoC5/PWM2.c ****             return (CY_GET_REG16(PWM2_COMPARE1_LSB_PTR));
 822:.\Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 823:.\Generated_Source\PSoC5/PWM2.c ****     }
 376              		.loc 1 823 0
 377 0004 80B2     		uxth	r0, r0
 378 0006 7047     		bx	lr
 379              	.L36:
 380              		.align	2
 381              	.L35:
 382 0008 124F0040 		.word	1073762066
 383              		.cfi_endproc
 384              	.LFE10:
 385              		.size	PWM2_ReadCompare, .-PWM2_ReadCompare
 386              		.section	.text.PWM2_ReadPeriod,"ax",%progbits
 387              		.align	2
 388              		.global	PWM2_ReadPeriod
 389              		.thumb
 390              		.thumb_func
 391              		.type	PWM2_ReadPeriod, %function
 392              	PWM2_ReadPeriod:
 393              	.LFB11:
 824:.\Generated_Source\PSoC5/PWM2.c **** 
 825:.\Generated_Source\PSoC5/PWM2.c **** #else
 826:.\Generated_Source\PSoC5/PWM2.c **** 
 827:.\Generated_Source\PSoC5/PWM2.c **** 
 828:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCompare1
 830:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC5/PWM2.c ****     *
 832:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 833:.\Generated_Source\PSoC5/PWM2.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC5/PWM2.c ****     *
 835:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 836:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 837:.\Generated_Source\PSoC5/PWM2.c ****     *
 838:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 839:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC5/PWM2.c ****     *
 841:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCompare1(void) 
 843:.\Generated_Source\PSoC5/PWM2.c ****     {
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 23


 844:.\Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_COMPARE1_LSB_PTR));
 845:.\Generated_Source\PSoC5/PWM2.c ****     }
 846:.\Generated_Source\PSoC5/PWM2.c **** 
 847:.\Generated_Source\PSoC5/PWM2.c **** 
 848:.\Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCompare2
 850:.\Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC5/PWM2.c ****     *
 852:.\Generated_Source\PSoC5/PWM2.c ****     * Summary:
 853:.\Generated_Source\PSoC5/PWM2.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC5/PWM2.c ****     *
 855:.\Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 856:.\Generated_Source\PSoC5/PWM2.c ****     *  None
 857:.\Generated_Source\PSoC5/PWM2.c ****     *
 858:.\Generated_Source\PSoC5/PWM2.c ****     * Return:
 859:.\Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC5/PWM2.c ****     *
 861:.\Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCompare2(void) 
 863:.\Generated_Source\PSoC5/PWM2.c ****     {
 864:.\Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_COMPARE2_LSB_PTR));
 865:.\Generated_Source\PSoC5/PWM2.c ****     }
 866:.\Generated_Source\PSoC5/PWM2.c **** 
 867:.\Generated_Source\PSoC5/PWM2.c **** #endif /* (PWM2_UseOneCompareMode) */
 868:.\Generated_Source\PSoC5/PWM2.c **** 
 869:.\Generated_Source\PSoC5/PWM2.c **** 
 870:.\Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_ReadPeriod
 872:.\Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 873:.\Generated_Source\PSoC5/PWM2.c **** *
 874:.\Generated_Source\PSoC5/PWM2.c **** * Summary:
 875:.\Generated_Source\PSoC5/PWM2.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC5/PWM2.c **** *
 877:.\Generated_Source\PSoC5/PWM2.c **** * Parameters:
 878:.\Generated_Source\PSoC5/PWM2.c **** *  None
 879:.\Generated_Source\PSoC5/PWM2.c **** *
 880:.\Generated_Source\PSoC5/PWM2.c **** * Return:
 881:.\Generated_Source\PSoC5/PWM2.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC5/PWM2.c **** *
 883:.\Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC5/PWM2.c **** uint16 PWM2_ReadPeriod(void) 
 885:.\Generated_Source\PSoC5/PWM2.c **** {
 394              		.loc 1 885 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 886:.\Generated_Source\PSoC5/PWM2.c ****     #if(PWM2_UsingFixedFunction)
 887:.\Generated_Source\PSoC5/PWM2.c ****         return ((uint16)CY_GET_REG16(PWM2_PERIOD_LSB_PTR));
 399              		.loc 1 887 0
 400 0000 014B     		ldr	r3, .L38
 401 0002 1888     		ldrh	r0, [r3]
 888:.\Generated_Source\PSoC5/PWM2.c ****     #else
 889:.\Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_PERIOD_LSB_PTR));
 890:.\Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 891:.\Generated_Source\PSoC5/PWM2.c **** }
 402              		.loc 1 891 0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 24


 403 0004 80B2     		uxth	r0, r0
 404 0006 7047     		bx	lr
 405              	.L39:
 406              		.align	2
 407              	.L38:
 408 0008 104F0040 		.word	1073762064
 409              		.cfi_endproc
 410              	.LFE11:
 411              		.size	PWM2_ReadPeriod, .-PWM2_ReadPeriod
 412              		.global	PWM2_initVar
 413              		.bss
 414              		.set	.LANCHOR0,. + 0
 415              		.type	PWM2_initVar, %object
 416              		.size	PWM2_initVar, 1
 417              	PWM2_initVar:
 418 0000 00       		.space	1
 419              		.text
 420              	.Letext0:
 421              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 422              		.section	.debug_info,"",%progbits
 423              	.Ldebug_info0:
 424 0000 76020000 		.4byte	0x276
 425 0004 0400     		.2byte	0x4
 426 0006 00000000 		.4byte	.Ldebug_abbrev0
 427 000a 04       		.byte	0x4
 428 000b 01       		.uleb128 0x1
 429 000c 32010000 		.4byte	.LASF34
 430 0010 01       		.byte	0x1
 431 0011 8A000000 		.4byte	.LASF35
 432 0015 06000000 		.4byte	.LASF36
 433 0019 00000000 		.4byte	.Ldebug_ranges0+0
 434 001d 00000000 		.4byte	0
 435 0021 00000000 		.4byte	.Ldebug_line0
 436 0025 02       		.uleb128 0x2
 437 0026 01       		.byte	0x1
 438 0027 06       		.byte	0x6
 439 0028 64020000 		.4byte	.LASF0
 440 002c 02       		.uleb128 0x2
 441 002d 01       		.byte	0x1
 442 002e 08       		.byte	0x8
 443 002f CD000000 		.4byte	.LASF1
 444 0033 02       		.uleb128 0x2
 445 0034 02       		.byte	0x2
 446 0035 05       		.byte	0x5
 447 0036 4C020000 		.4byte	.LASF2
 448 003a 02       		.uleb128 0x2
 449 003b 02       		.byte	0x2
 450 003c 07       		.byte	0x7
 451 003d 57000000 		.4byte	.LASF3
 452 0041 02       		.uleb128 0x2
 453 0042 04       		.byte	0x4
 454 0043 05       		.byte	0x5
 455 0044 56020000 		.4byte	.LASF4
 456 0048 02       		.uleb128 0x2
 457 0049 04       		.byte	0x4
 458 004a 07       		.byte	0x7
 459 004b E0000000 		.4byte	.LASF5
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 25


 460 004f 02       		.uleb128 0x2
 461 0050 08       		.byte	0x8
 462 0051 05       		.byte	0x5
 463 0052 1E020000 		.4byte	.LASF6
 464 0056 02       		.uleb128 0x2
 465 0057 08       		.byte	0x8
 466 0058 07       		.byte	0x7
 467 0059 CD010000 		.4byte	.LASF7
 468 005d 03       		.uleb128 0x3
 469 005e 04       		.byte	0x4
 470 005f 05       		.byte	0x5
 471 0060 696E7400 		.ascii	"int\000"
 472 0064 02       		.uleb128 0x2
 473 0065 04       		.byte	0x4
 474 0066 07       		.byte	0x7
 475 0067 C0010000 		.4byte	.LASF8
 476 006b 04       		.uleb128 0x4
 477 006c F2000000 		.4byte	.LASF9
 478 0070 02       		.byte	0x2
 479 0071 9201     		.2byte	0x192
 480 0073 2C000000 		.4byte	0x2c
 481 0077 04       		.uleb128 0x4
 482 0078 07010000 		.4byte	.LASF10
 483 007c 02       		.byte	0x2
 484 007d 9301     		.2byte	0x193
 485 007f 3A000000 		.4byte	0x3a
 486 0083 02       		.uleb128 0x2
 487 0084 04       		.byte	0x4
 488 0085 04       		.byte	0x4
 489 0086 AA000000 		.4byte	.LASF11
 490 008a 02       		.uleb128 0x2
 491 008b 08       		.byte	0x8
 492 008c 04       		.byte	0x4
 493 008d 00010000 		.4byte	.LASF12
 494 0091 02       		.uleb128 0x2
 495 0092 01       		.byte	0x1
 496 0093 08       		.byte	0x8
 497 0094 5F020000 		.4byte	.LASF13
 498 0098 04       		.uleb128 0x4
 499 0099 DB000000 		.4byte	.LASF14
 500 009d 02       		.byte	0x2
 501 009e 3C02     		.2byte	0x23c
 502 00a0 A4000000 		.4byte	0xa4
 503 00a4 05       		.uleb128 0x5
 504 00a5 6B000000 		.4byte	0x6b
 505 00a9 04       		.uleb128 0x4
 506 00aa 00000000 		.4byte	.LASF15
 507 00ae 02       		.byte	0x2
 508 00af 3D02     		.2byte	0x23d
 509 00b1 B5000000 		.4byte	0xb5
 510 00b5 05       		.uleb128 0x5
 511 00b6 77000000 		.4byte	0x77
 512 00ba 02       		.uleb128 0x2
 513 00bb 04       		.byte	0x4
 514 00bc 07       		.byte	0x7
 515 00bd 15020000 		.4byte	.LASF16
 516 00c1 06       		.uleb128 0x6
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 26


 517 00c2 C1000000 		.4byte	.LASF17
 518 00c6 01       		.byte	0x1
 519 00c7 C7       		.byte	0xc7
 520 00c8 00000000 		.4byte	.LFB2
 521 00cc 28000000 		.4byte	.LFE2-.LFB2
 522 00d0 01       		.uleb128 0x1
 523 00d1 9C       		.byte	0x9c
 524 00d2 06       		.uleb128 0x6
 525 00d3 0E010000 		.4byte	.LASF18
 526 00d7 01       		.byte	0x1
 527 00d8 E9       		.byte	0xe9
 528 00d9 00000000 		.4byte	.LFB3
 529 00dd 28000000 		.4byte	.LFE3-.LFB3
 530 00e1 01       		.uleb128 0x1
 531 00e2 9C       		.byte	0x9c
 532 00e3 07       		.uleb128 0x7
 533 00e4 B0000000 		.4byte	.LASF19
 534 00e8 01       		.byte	0x1
 535 00e9 E201     		.2byte	0x1e2
 536 00eb 00000000 		.4byte	.LFB4
 537 00ef 0C000000 		.4byte	.LFE4-.LFB4
 538 00f3 01       		.uleb128 0x1
 539 00f4 9C       		.byte	0x9c
 540 00f5 08010000 		.4byte	0x108
 541 00f9 08       		.uleb128 0x8
 542 00fa 50000000 		.4byte	.LASF21
 543 00fe 01       		.byte	0x1
 544 00ff E201     		.2byte	0x1e2
 545 0101 77000000 		.4byte	0x77
 546 0105 01       		.uleb128 0x1
 547 0106 50       		.byte	0x50
 548 0107 00       		.byte	0
 549 0108 07       		.uleb128 0x7
 550 0109 2C020000 		.4byte	.LASF20
 551 010d 01       		.byte	0x1
 552 010e 0402     		.2byte	0x204
 553 0110 00000000 		.4byte	.LFB5
 554 0114 0C000000 		.4byte	.LFE5-.LFB5
 555 0118 01       		.uleb128 0x1
 556 0119 9C       		.byte	0x9c
 557 011a 2D010000 		.4byte	0x12d
 558 011e 08       		.uleb128 0x8
 559 011f 70020000 		.4byte	.LASF22
 560 0123 01       		.byte	0x1
 561 0124 0402     		.2byte	0x204
 562 0126 77000000 		.4byte	0x77
 563 012a 01       		.uleb128 0x1
 564 012b 50       		.byte	0x50
 565 012c 00       		.byte	0
 566 012d 07       		.uleb128 0x7
 567 012e 6A000000 		.4byte	.LASF23
 568 0132 01       		.byte	0x1
 569 0133 AC02     		.2byte	0x2ac
 570 0135 00000000 		.4byte	.LFB6
 571 0139 0C000000 		.4byte	.LFE6-.LFB6
 572 013d 01       		.uleb128 0x1
 573 013e 9C       		.byte	0x9c
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 27


 574 013f 52010000 		.4byte	0x152
 575 0143 08       		.uleb128 0x8
 576 0144 3E020000 		.4byte	.LASF24
 577 0148 01       		.byte	0x1
 578 0149 AC02     		.2byte	0x2ac
 579 014b 6B000000 		.4byte	0x6b
 580 014f 01       		.uleb128 0x1
 581 0150 50       		.byte	0x50
 582 0151 00       		.byte	0
 583 0152 09       		.uleb128 0x9
 584 0153 80000000 		.4byte	.LASF25
 585 0157 01       		.byte	0x1
 586 0158 54       		.byte	0x54
 587 0159 00000000 		.4byte	.LFB1
 588 015d 78000000 		.4byte	.LFE1-.LFB1
 589 0161 01       		.uleb128 0x1
 590 0162 9C       		.byte	0x9c
 591 0163 B0010000 		.4byte	0x1b0
 592 0167 0A       		.uleb128 0xa
 593 0168 00020000 		.4byte	.LASF27
 594 016c 01       		.byte	0x1
 595 016d 57       		.byte	0x57
 596 016e 6B000000 		.4byte	0x6b
 597 0172 00000000 		.4byte	.LLST0
 598 0176 0B       		.uleb128 0xb
 599 0177 44000000 		.4byte	.LVL5
 600 017b E3000000 		.4byte	0xe3
 601 017f 8B010000 		.4byte	0x18b
 602 0183 0C       		.uleb128 0xc
 603 0184 01       		.uleb128 0x1
 604 0185 50       		.byte	0x50
 605 0186 03       		.uleb128 0x3
 606 0187 0A       		.byte	0xa
 607 0188 E803     		.2byte	0x3e8
 608 018a 00       		.byte	0
 609 018b 0B       		.uleb128 0xb
 610 018c 4C000000 		.4byte	.LVL6
 611 0190 08010000 		.4byte	0x108
 612 0194 A0010000 		.4byte	0x1a0
 613 0198 0C       		.uleb128 0xc
 614 0199 01       		.uleb128 0x1
 615 019a 50       		.byte	0x50
 616 019b 03       		.uleb128 0x3
 617 019c 0A       		.byte	0xa
 618 019d F401     		.2byte	0x1f4
 619 019f 00       		.byte	0
 620 01a0 0D       		.uleb128 0xd
 621 01a1 52000000 		.4byte	.LVL7
 622 01a5 2D010000 		.4byte	0x12d
 623 01a9 0C       		.uleb128 0xc
 624 01aa 01       		.uleb128 0x1
 625 01ab 50       		.byte	0x50
 626 01ac 01       		.uleb128 0x1
 627 01ad 30       		.byte	0x30
 628 01ae 00       		.byte	0
 629 01af 00       		.byte	0
 630 01b0 09       		.uleb128 0x9
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 28


 631 01b1 F5010000 		.4byte	.LASF26
 632 01b5 01       		.byte	0x1
 633 01b6 37       		.byte	0x37
 634 01b7 00000000 		.4byte	.LFB0
 635 01bb 1C000000 		.4byte	.LFE0-.LFB0
 636 01bf 01       		.uleb128 0x1
 637 01c0 9C       		.byte	0x9c
 638 01c1 D8010000 		.4byte	0x1d8
 639 01c5 0E       		.uleb128 0xe
 640 01c6 0C000000 		.4byte	.LVL8
 641 01ca 52010000 		.4byte	0x152
 642 01ce 0E       		.uleb128 0xe
 643 01cf 16000000 		.4byte	.LVL9
 644 01d3 C1000000 		.4byte	0xc1
 645 01d7 00       		.byte	0
 646 01d8 0F       		.uleb128 0xf
 647 01d9 9E020000 		.4byte	.LASF31
 648 01dd 01       		.byte	0x1
 649 01de C702     		.2byte	0x2c7
 650 01e0 6B000000 		.4byte	0x6b
 651 01e4 00000000 		.4byte	.LFB7
 652 01e8 0C000000 		.4byte	.LFE7-.LFB7
 653 01ec 01       		.uleb128 0x1
 654 01ed 9C       		.byte	0x9c
 655 01ee 10       		.uleb128 0x10
 656 01ef 85020000 		.4byte	.LASF37
 657 01f3 01       		.byte	0x1
 658 01f4 E102     		.2byte	0x2e1
 659 01f6 6B000000 		.4byte	0x6b
 660 01fa 00000000 		.4byte	.LFB8
 661 01fe 0C000000 		.4byte	.LFE8-.LFB8
 662 0202 01       		.uleb128 0x1
 663 0203 9C       		.byte	0x9c
 664 0204 17020000 		.4byte	0x217
 665 0208 11       		.uleb128 0x11
 666 0209 49000000 		.4byte	.LASF28
 667 020d 01       		.byte	0x1
 668 020e E302     		.2byte	0x2e3
 669 0210 6B000000 		.4byte	0x6b
 670 0214 01       		.uleb128 0x1
 671 0215 50       		.byte	0x50
 672 0216 00       		.byte	0
 673 0217 07       		.uleb128 0x7
 674 0218 18010000 		.4byte	.LASF29
 675 021c 01       		.byte	0x1
 676 021d FD02     		.2byte	0x2fd
 677 021f 00000000 		.4byte	.LFB9
 678 0223 0C000000 		.4byte	.LFE9-.LFB9
 679 0227 01       		.uleb128 0x1
 680 0228 9C       		.byte	0x9c
 681 0229 3C020000 		.4byte	0x23c
 682 022d 08       		.uleb128 0x8
 683 022e F8000000 		.4byte	.LASF30
 684 0232 01       		.byte	0x1
 685 0233 FD02     		.2byte	0x2fd
 686 0235 6B000000 		.4byte	0x6b
 687 0239 01       		.uleb128 0x1
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 29


 688 023a 50       		.byte	0x50
 689 023b 00       		.byte	0
 690 023c 0F       		.uleb128 0xf
 691 023d E4010000 		.4byte	.LASF32
 692 0241 01       		.byte	0x1
 693 0242 3003     		.2byte	0x330
 694 0244 77000000 		.4byte	0x77
 695 0248 00000000 		.4byte	.LFB10
 696 024c 0C000000 		.4byte	.LFE10-.LFB10
 697 0250 01       		.uleb128 0x1
 698 0251 9C       		.byte	0x9c
 699 0252 0F       		.uleb128 0xf
 700 0253 05020000 		.4byte	.LASF33
 701 0257 01       		.byte	0x1
 702 0258 7403     		.2byte	0x374
 703 025a 77000000 		.4byte	0x77
 704 025e 00000000 		.4byte	.LFB11
 705 0262 0C000000 		.4byte	.LFE11-.LFB11
 706 0266 01       		.uleb128 0x1
 707 0267 9C       		.byte	0x9c
 708 0268 12       		.uleb128 0x12
 709 0269 78020000 		.4byte	.LASF38
 710 026d 01       		.byte	0x1
 711 026e 20       		.byte	0x20
 712 026f 6B000000 		.4byte	0x6b
 713 0273 05       		.uleb128 0x5
 714 0274 03       		.byte	0x3
 715 0275 00000000 		.4byte	PWM2_initVar
 716 0279 00       		.byte	0
 717              		.section	.debug_abbrev,"",%progbits
 718              	.Ldebug_abbrev0:
 719 0000 01       		.uleb128 0x1
 720 0001 11       		.uleb128 0x11
 721 0002 01       		.byte	0x1
 722 0003 25       		.uleb128 0x25
 723 0004 0E       		.uleb128 0xe
 724 0005 13       		.uleb128 0x13
 725 0006 0B       		.uleb128 0xb
 726 0007 03       		.uleb128 0x3
 727 0008 0E       		.uleb128 0xe
 728 0009 1B       		.uleb128 0x1b
 729 000a 0E       		.uleb128 0xe
 730 000b 55       		.uleb128 0x55
 731 000c 17       		.uleb128 0x17
 732 000d 11       		.uleb128 0x11
 733 000e 01       		.uleb128 0x1
 734 000f 10       		.uleb128 0x10
 735 0010 17       		.uleb128 0x17
 736 0011 00       		.byte	0
 737 0012 00       		.byte	0
 738 0013 02       		.uleb128 0x2
 739 0014 24       		.uleb128 0x24
 740 0015 00       		.byte	0
 741 0016 0B       		.uleb128 0xb
 742 0017 0B       		.uleb128 0xb
 743 0018 3E       		.uleb128 0x3e
 744 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 30


 745 001a 03       		.uleb128 0x3
 746 001b 0E       		.uleb128 0xe
 747 001c 00       		.byte	0
 748 001d 00       		.byte	0
 749 001e 03       		.uleb128 0x3
 750 001f 24       		.uleb128 0x24
 751 0020 00       		.byte	0
 752 0021 0B       		.uleb128 0xb
 753 0022 0B       		.uleb128 0xb
 754 0023 3E       		.uleb128 0x3e
 755 0024 0B       		.uleb128 0xb
 756 0025 03       		.uleb128 0x3
 757 0026 08       		.uleb128 0x8
 758 0027 00       		.byte	0
 759 0028 00       		.byte	0
 760 0029 04       		.uleb128 0x4
 761 002a 16       		.uleb128 0x16
 762 002b 00       		.byte	0
 763 002c 03       		.uleb128 0x3
 764 002d 0E       		.uleb128 0xe
 765 002e 3A       		.uleb128 0x3a
 766 002f 0B       		.uleb128 0xb
 767 0030 3B       		.uleb128 0x3b
 768 0031 05       		.uleb128 0x5
 769 0032 49       		.uleb128 0x49
 770 0033 13       		.uleb128 0x13
 771 0034 00       		.byte	0
 772 0035 00       		.byte	0
 773 0036 05       		.uleb128 0x5
 774 0037 35       		.uleb128 0x35
 775 0038 00       		.byte	0
 776 0039 49       		.uleb128 0x49
 777 003a 13       		.uleb128 0x13
 778 003b 00       		.byte	0
 779 003c 00       		.byte	0
 780 003d 06       		.uleb128 0x6
 781 003e 2E       		.uleb128 0x2e
 782 003f 00       		.byte	0
 783 0040 3F       		.uleb128 0x3f
 784 0041 19       		.uleb128 0x19
 785 0042 03       		.uleb128 0x3
 786 0043 0E       		.uleb128 0xe
 787 0044 3A       		.uleb128 0x3a
 788 0045 0B       		.uleb128 0xb
 789 0046 3B       		.uleb128 0x3b
 790 0047 0B       		.uleb128 0xb
 791 0048 27       		.uleb128 0x27
 792 0049 19       		.uleb128 0x19
 793 004a 11       		.uleb128 0x11
 794 004b 01       		.uleb128 0x1
 795 004c 12       		.uleb128 0x12
 796 004d 06       		.uleb128 0x6
 797 004e 40       		.uleb128 0x40
 798 004f 18       		.uleb128 0x18
 799 0050 9742     		.uleb128 0x2117
 800 0052 19       		.uleb128 0x19
 801 0053 00       		.byte	0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 31


 802 0054 00       		.byte	0
 803 0055 07       		.uleb128 0x7
 804 0056 2E       		.uleb128 0x2e
 805 0057 01       		.byte	0x1
 806 0058 3F       		.uleb128 0x3f
 807 0059 19       		.uleb128 0x19
 808 005a 03       		.uleb128 0x3
 809 005b 0E       		.uleb128 0xe
 810 005c 3A       		.uleb128 0x3a
 811 005d 0B       		.uleb128 0xb
 812 005e 3B       		.uleb128 0x3b
 813 005f 05       		.uleb128 0x5
 814 0060 27       		.uleb128 0x27
 815 0061 19       		.uleb128 0x19
 816 0062 11       		.uleb128 0x11
 817 0063 01       		.uleb128 0x1
 818 0064 12       		.uleb128 0x12
 819 0065 06       		.uleb128 0x6
 820 0066 40       		.uleb128 0x40
 821 0067 18       		.uleb128 0x18
 822 0068 9742     		.uleb128 0x2117
 823 006a 19       		.uleb128 0x19
 824 006b 01       		.uleb128 0x1
 825 006c 13       		.uleb128 0x13
 826 006d 00       		.byte	0
 827 006e 00       		.byte	0
 828 006f 08       		.uleb128 0x8
 829 0070 05       		.uleb128 0x5
 830 0071 00       		.byte	0
 831 0072 03       		.uleb128 0x3
 832 0073 0E       		.uleb128 0xe
 833 0074 3A       		.uleb128 0x3a
 834 0075 0B       		.uleb128 0xb
 835 0076 3B       		.uleb128 0x3b
 836 0077 05       		.uleb128 0x5
 837 0078 49       		.uleb128 0x49
 838 0079 13       		.uleb128 0x13
 839 007a 02       		.uleb128 0x2
 840 007b 18       		.uleb128 0x18
 841 007c 00       		.byte	0
 842 007d 00       		.byte	0
 843 007e 09       		.uleb128 0x9
 844 007f 2E       		.uleb128 0x2e
 845 0080 01       		.byte	0x1
 846 0081 3F       		.uleb128 0x3f
 847 0082 19       		.uleb128 0x19
 848 0083 03       		.uleb128 0x3
 849 0084 0E       		.uleb128 0xe
 850 0085 3A       		.uleb128 0x3a
 851 0086 0B       		.uleb128 0xb
 852 0087 3B       		.uleb128 0x3b
 853 0088 0B       		.uleb128 0xb
 854 0089 27       		.uleb128 0x27
 855 008a 19       		.uleb128 0x19
 856 008b 11       		.uleb128 0x11
 857 008c 01       		.uleb128 0x1
 858 008d 12       		.uleb128 0x12
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 32


 859 008e 06       		.uleb128 0x6
 860 008f 40       		.uleb128 0x40
 861 0090 18       		.uleb128 0x18
 862 0091 9742     		.uleb128 0x2117
 863 0093 19       		.uleb128 0x19
 864 0094 01       		.uleb128 0x1
 865 0095 13       		.uleb128 0x13
 866 0096 00       		.byte	0
 867 0097 00       		.byte	0
 868 0098 0A       		.uleb128 0xa
 869 0099 34       		.uleb128 0x34
 870 009a 00       		.byte	0
 871 009b 03       		.uleb128 0x3
 872 009c 0E       		.uleb128 0xe
 873 009d 3A       		.uleb128 0x3a
 874 009e 0B       		.uleb128 0xb
 875 009f 3B       		.uleb128 0x3b
 876 00a0 0B       		.uleb128 0xb
 877 00a1 49       		.uleb128 0x49
 878 00a2 13       		.uleb128 0x13
 879 00a3 02       		.uleb128 0x2
 880 00a4 17       		.uleb128 0x17
 881 00a5 00       		.byte	0
 882 00a6 00       		.byte	0
 883 00a7 0B       		.uleb128 0xb
 884 00a8 898201   		.uleb128 0x4109
 885 00ab 01       		.byte	0x1
 886 00ac 11       		.uleb128 0x11
 887 00ad 01       		.uleb128 0x1
 888 00ae 31       		.uleb128 0x31
 889 00af 13       		.uleb128 0x13
 890 00b0 01       		.uleb128 0x1
 891 00b1 13       		.uleb128 0x13
 892 00b2 00       		.byte	0
 893 00b3 00       		.byte	0
 894 00b4 0C       		.uleb128 0xc
 895 00b5 8A8201   		.uleb128 0x410a
 896 00b8 00       		.byte	0
 897 00b9 02       		.uleb128 0x2
 898 00ba 18       		.uleb128 0x18
 899 00bb 9142     		.uleb128 0x2111
 900 00bd 18       		.uleb128 0x18
 901 00be 00       		.byte	0
 902 00bf 00       		.byte	0
 903 00c0 0D       		.uleb128 0xd
 904 00c1 898201   		.uleb128 0x4109
 905 00c4 01       		.byte	0x1
 906 00c5 11       		.uleb128 0x11
 907 00c6 01       		.uleb128 0x1
 908 00c7 31       		.uleb128 0x31
 909 00c8 13       		.uleb128 0x13
 910 00c9 00       		.byte	0
 911 00ca 00       		.byte	0
 912 00cb 0E       		.uleb128 0xe
 913 00cc 898201   		.uleb128 0x4109
 914 00cf 00       		.byte	0
 915 00d0 11       		.uleb128 0x11
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 33


 916 00d1 01       		.uleb128 0x1
 917 00d2 31       		.uleb128 0x31
 918 00d3 13       		.uleb128 0x13
 919 00d4 00       		.byte	0
 920 00d5 00       		.byte	0
 921 00d6 0F       		.uleb128 0xf
 922 00d7 2E       		.uleb128 0x2e
 923 00d8 00       		.byte	0
 924 00d9 3F       		.uleb128 0x3f
 925 00da 19       		.uleb128 0x19
 926 00db 03       		.uleb128 0x3
 927 00dc 0E       		.uleb128 0xe
 928 00dd 3A       		.uleb128 0x3a
 929 00de 0B       		.uleb128 0xb
 930 00df 3B       		.uleb128 0x3b
 931 00e0 05       		.uleb128 0x5
 932 00e1 27       		.uleb128 0x27
 933 00e2 19       		.uleb128 0x19
 934 00e3 49       		.uleb128 0x49
 935 00e4 13       		.uleb128 0x13
 936 00e5 11       		.uleb128 0x11
 937 00e6 01       		.uleb128 0x1
 938 00e7 12       		.uleb128 0x12
 939 00e8 06       		.uleb128 0x6
 940 00e9 40       		.uleb128 0x40
 941 00ea 18       		.uleb128 0x18
 942 00eb 9742     		.uleb128 0x2117
 943 00ed 19       		.uleb128 0x19
 944 00ee 00       		.byte	0
 945 00ef 00       		.byte	0
 946 00f0 10       		.uleb128 0x10
 947 00f1 2E       		.uleb128 0x2e
 948 00f2 01       		.byte	0x1
 949 00f3 3F       		.uleb128 0x3f
 950 00f4 19       		.uleb128 0x19
 951 00f5 03       		.uleb128 0x3
 952 00f6 0E       		.uleb128 0xe
 953 00f7 3A       		.uleb128 0x3a
 954 00f8 0B       		.uleb128 0xb
 955 00f9 3B       		.uleb128 0x3b
 956 00fa 05       		.uleb128 0x5
 957 00fb 27       		.uleb128 0x27
 958 00fc 19       		.uleb128 0x19
 959 00fd 49       		.uleb128 0x49
 960 00fe 13       		.uleb128 0x13
 961 00ff 11       		.uleb128 0x11
 962 0100 01       		.uleb128 0x1
 963 0101 12       		.uleb128 0x12
 964 0102 06       		.uleb128 0x6
 965 0103 40       		.uleb128 0x40
 966 0104 18       		.uleb128 0x18
 967 0105 9742     		.uleb128 0x2117
 968 0107 19       		.uleb128 0x19
 969 0108 01       		.uleb128 0x1
 970 0109 13       		.uleb128 0x13
 971 010a 00       		.byte	0
 972 010b 00       		.byte	0
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 34


 973 010c 11       		.uleb128 0x11
 974 010d 34       		.uleb128 0x34
 975 010e 00       		.byte	0
 976 010f 03       		.uleb128 0x3
 977 0110 0E       		.uleb128 0xe
 978 0111 3A       		.uleb128 0x3a
 979 0112 0B       		.uleb128 0xb
 980 0113 3B       		.uleb128 0x3b
 981 0114 05       		.uleb128 0x5
 982 0115 49       		.uleb128 0x49
 983 0116 13       		.uleb128 0x13
 984 0117 02       		.uleb128 0x2
 985 0118 18       		.uleb128 0x18
 986 0119 00       		.byte	0
 987 011a 00       		.byte	0
 988 011b 12       		.uleb128 0x12
 989 011c 34       		.uleb128 0x34
 990 011d 00       		.byte	0
 991 011e 03       		.uleb128 0x3
 992 011f 0E       		.uleb128 0xe
 993 0120 3A       		.uleb128 0x3a
 994 0121 0B       		.uleb128 0xb
 995 0122 3B       		.uleb128 0x3b
 996 0123 0B       		.uleb128 0xb
 997 0124 49       		.uleb128 0x49
 998 0125 13       		.uleb128 0x13
 999 0126 3F       		.uleb128 0x3f
 1000 0127 19       		.uleb128 0x19
 1001 0128 02       		.uleb128 0x2
 1002 0129 18       		.uleb128 0x18
 1003 012a 00       		.byte	0
 1004 012b 00       		.byte	0
 1005 012c 00       		.byte	0
 1006              		.section	.debug_loc,"",%progbits
 1007              	.Ldebug_loc0:
 1008              	.LLST0:
 1009 0000 14000000 		.4byte	.LVL3
 1010 0004 18000000 		.4byte	.LVL4
 1011 0008 0100     		.2byte	0x1
 1012 000a 53       		.byte	0x53
 1013 000b 00000000 		.4byte	0
 1014 000f 00000000 		.4byte	0
 1015              		.section	.debug_aranges,"",%progbits
 1016 0000 74000000 		.4byte	0x74
 1017 0004 0200     		.2byte	0x2
 1018 0006 00000000 		.4byte	.Ldebug_info0
 1019 000a 04       		.byte	0x4
 1020 000b 00       		.byte	0
 1021 000c 0000     		.2byte	0
 1022 000e 0000     		.2byte	0
 1023 0010 00000000 		.4byte	.LFB2
 1024 0014 28000000 		.4byte	.LFE2-.LFB2
 1025 0018 00000000 		.4byte	.LFB3
 1026 001c 28000000 		.4byte	.LFE3-.LFB3
 1027 0020 00000000 		.4byte	.LFB4
 1028 0024 0C000000 		.4byte	.LFE4-.LFB4
 1029 0028 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 35


 1030 002c 0C000000 		.4byte	.LFE5-.LFB5
 1031 0030 00000000 		.4byte	.LFB6
 1032 0034 0C000000 		.4byte	.LFE6-.LFB6
 1033 0038 00000000 		.4byte	.LFB1
 1034 003c 78000000 		.4byte	.LFE1-.LFB1
 1035 0040 00000000 		.4byte	.LFB0
 1036 0044 1C000000 		.4byte	.LFE0-.LFB0
 1037 0048 00000000 		.4byte	.LFB7
 1038 004c 0C000000 		.4byte	.LFE7-.LFB7
 1039 0050 00000000 		.4byte	.LFB8
 1040 0054 0C000000 		.4byte	.LFE8-.LFB8
 1041 0058 00000000 		.4byte	.LFB9
 1042 005c 0C000000 		.4byte	.LFE9-.LFB9
 1043 0060 00000000 		.4byte	.LFB10
 1044 0064 0C000000 		.4byte	.LFE10-.LFB10
 1045 0068 00000000 		.4byte	.LFB11
 1046 006c 0C000000 		.4byte	.LFE11-.LFB11
 1047 0070 00000000 		.4byte	0
 1048 0074 00000000 		.4byte	0
 1049              		.section	.debug_ranges,"",%progbits
 1050              	.Ldebug_ranges0:
 1051 0000 00000000 		.4byte	.LFB2
 1052 0004 28000000 		.4byte	.LFE2
 1053 0008 00000000 		.4byte	.LFB3
 1054 000c 28000000 		.4byte	.LFE3
 1055 0010 00000000 		.4byte	.LFB4
 1056 0014 0C000000 		.4byte	.LFE4
 1057 0018 00000000 		.4byte	.LFB5
 1058 001c 0C000000 		.4byte	.LFE5
 1059 0020 00000000 		.4byte	.LFB6
 1060 0024 0C000000 		.4byte	.LFE6
 1061 0028 00000000 		.4byte	.LFB1
 1062 002c 78000000 		.4byte	.LFE1
 1063 0030 00000000 		.4byte	.LFB0
 1064 0034 1C000000 		.4byte	.LFE0
 1065 0038 00000000 		.4byte	.LFB7
 1066 003c 0C000000 		.4byte	.LFE7
 1067 0040 00000000 		.4byte	.LFB8
 1068 0044 0C000000 		.4byte	.LFE8
 1069 0048 00000000 		.4byte	.LFB9
 1070 004c 0C000000 		.4byte	.LFE9
 1071 0050 00000000 		.4byte	.LFB10
 1072 0054 0C000000 		.4byte	.LFE10
 1073 0058 00000000 		.4byte	.LFB11
 1074 005c 0C000000 		.4byte	.LFE11
 1075 0060 00000000 		.4byte	0
 1076 0064 00000000 		.4byte	0
 1077              		.section	.debug_line,"",%progbits
 1078              	.Ldebug_line0:
 1079 0000 30010000 		.section	.debug_str,"MS",%progbits,1
 1079      02004300 
 1079      00000201 
 1079      FB0E0D00 
 1079      01010101 
 1080              	.LASF15:
 1081 0000 72656731 		.ascii	"reg16\000"
 1081      3600
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 36


 1082              	.LASF36:
 1083 0006 433A5C55 		.ascii	"C:\\Users\\cruiser\\Documents\\PSoC Creator\\Voltro"
 1083      73657273 
 1083      5C637275 
 1083      69736572 
 1083      5C446F63 
 1084 0034 6E5C566F 		.ascii	"n\\Voltron Main.cydsn\000"
 1084      6C74726F 
 1084      6E204D61 
 1084      696E2E63 
 1084      7964736E 
 1085              	.LASF28:
 1086 0049 72657375 		.ascii	"result\000"
 1086      6C7400
 1087              	.LASF21:
 1088 0050 70657269 		.ascii	"period\000"
 1088      6F6400
 1089              	.LASF3:
 1090 0057 73686F72 		.ascii	"short unsigned int\000"
 1090      7420756E 
 1090      7369676E 
 1090      65642069 
 1090      6E7400
 1091              	.LASF23:
 1092 006a 50574D32 		.ascii	"PWM2_SetInterruptMode\000"
 1092      5F536574 
 1092      496E7465 
 1092      72727570 
 1092      744D6F64 
 1093              	.LASF25:
 1094 0080 50574D32 		.ascii	"PWM2_Init\000"
 1094      5F496E69 
 1094      7400
 1095              	.LASF35:
 1096 008a 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\PWM2.c\000"
 1096      6E657261 
 1096      7465645F 
 1096      536F7572 
 1096      63655C50 
 1097              	.LASF11:
 1098 00aa 666C6F61 		.ascii	"float\000"
 1098      7400
 1099              	.LASF19:
 1100 00b0 50574D32 		.ascii	"PWM2_WritePeriod\000"
 1100      5F577269 
 1100      74655065 
 1100      72696F64 
 1100      00
 1101              	.LASF17:
 1102 00c1 50574D32 		.ascii	"PWM2_Enable\000"
 1102      5F456E61 
 1102      626C6500 
 1103              	.LASF1:
 1104 00cd 756E7369 		.ascii	"unsigned char\000"
 1104      676E6564 
 1104      20636861 
 1104      7200
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 37


 1105              	.LASF14:
 1106 00db 72656738 		.ascii	"reg8\000"
 1106      00
 1107              	.LASF5:
 1108 00e0 6C6F6E67 		.ascii	"long unsigned int\000"
 1108      20756E73 
 1108      69676E65 
 1108      6420696E 
 1108      7400
 1109              	.LASF9:
 1110 00f2 75696E74 		.ascii	"uint8\000"
 1110      3800
 1111              	.LASF30:
 1112 00f8 636F6E74 		.ascii	"control\000"
 1112      726F6C00 
 1113              	.LASF12:
 1114 0100 646F7562 		.ascii	"double\000"
 1114      6C6500
 1115              	.LASF10:
 1116 0107 75696E74 		.ascii	"uint16\000"
 1116      313600
 1117              	.LASF18:
 1118 010e 50574D32 		.ascii	"PWM2_Stop\000"
 1118      5F53746F 
 1118      7000
 1119              	.LASF29:
 1120 0118 50574D32 		.ascii	"PWM2_WriteControlRegister\000"
 1120      5F577269 
 1120      7465436F 
 1120      6E74726F 
 1120      6C526567 
 1121              	.LASF34:
 1122 0132 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1122      4320342E 
 1122      392E3320 
 1122      32303135 
 1122      30333033 
 1123 0165 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1123      20726576 
 1123      6973696F 
 1123      6E203232 
 1123      31323230 
 1124 0198 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1124      66756E63 
 1124      74696F6E 
 1124      2D736563 
 1124      74696F6E 
 1125              	.LASF8:
 1126 01c0 756E7369 		.ascii	"unsigned int\000"
 1126      676E6564 
 1126      20696E74 
 1126      00
 1127              	.LASF7:
 1128 01cd 6C6F6E67 		.ascii	"long long unsigned int\000"
 1128      206C6F6E 
 1128      6720756E 
 1128      7369676E 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 38


 1128      65642069 
 1129              	.LASF32:
 1130 01e4 50574D32 		.ascii	"PWM2_ReadCompare\000"
 1130      5F526561 
 1130      64436F6D 
 1130      70617265 
 1130      00
 1131              	.LASF26:
 1132 01f5 50574D32 		.ascii	"PWM2_Start\000"
 1132      5F537461 
 1132      727400
 1133              	.LASF27:
 1134 0200 6374726C 		.ascii	"ctrl\000"
 1134      00
 1135              	.LASF33:
 1136 0205 50574D32 		.ascii	"PWM2_ReadPeriod\000"
 1136      5F526561 
 1136      64506572 
 1136      696F6400 
 1137              	.LASF16:
 1138 0215 73697A65 		.ascii	"sizetype\000"
 1138      74797065 
 1138      00
 1139              	.LASF6:
 1140 021e 6C6F6E67 		.ascii	"long long int\000"
 1140      206C6F6E 
 1140      6720696E 
 1140      7400
 1141              	.LASF20:
 1142 022c 50574D32 		.ascii	"PWM2_WriteCompare\000"
 1142      5F577269 
 1142      7465436F 
 1142      6D706172 
 1142      6500
 1143              	.LASF24:
 1144 023e 696E7465 		.ascii	"interruptMode\000"
 1144      72727570 
 1144      744D6F64 
 1144      6500
 1145              	.LASF2:
 1146 024c 73686F72 		.ascii	"short int\000"
 1146      7420696E 
 1146      7400
 1147              	.LASF4:
 1148 0256 6C6F6E67 		.ascii	"long int\000"
 1148      20696E74 
 1148      00
 1149              	.LASF13:
 1150 025f 63686172 		.ascii	"char\000"
 1150      00
 1151              	.LASF0:
 1152 0264 7369676E 		.ascii	"signed char\000"
 1152      65642063 
 1152      68617200 
 1153              	.LASF22:
 1154 0270 636F6D70 		.ascii	"compare\000"
 1154      61726500 
ARM GAS  C:\Users\cruiser\AppData\Local\Temp\ccCOYCen.s 			page 39


 1155              	.LASF38:
 1156 0278 50574D32 		.ascii	"PWM2_initVar\000"
 1156      5F696E69 
 1156      74566172 
 1156      00
 1157              	.LASF37:
 1158 0285 50574D32 		.ascii	"PWM2_ReadControlRegister\000"
 1158      5F526561 
 1158      64436F6E 
 1158      74726F6C 
 1158      52656769 
 1159              	.LASF31:
 1160 029e 50574D32 		.ascii	"PWM2_ReadStatusRegister\000"
 1160      5F526561 
 1160      64537461 
 1160      74757352 
 1160      65676973 
 1161              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
